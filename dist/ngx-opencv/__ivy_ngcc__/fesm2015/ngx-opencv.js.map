{"version":3,"file":"ngx-opencv.js","sources":["ngx-opencv/lib/ngx-open-cv.service.ts","ngx-opencv/lib/ngx-opencv.module.ts","ngx-opencv/lib/models.ts"],"names":[],"mappings":";;;;;;;;;;MAIa,iBAAiB,GAAG,IAAI,cAAc,CAAe,4BAA4B;AAE9F,MAGa,gBAAgB;AAE7B;AAAS;AAA2B;AACpB;AACT,IAML,YAAuC,OAAqB,EAAU,OAAe;AACtF,QADuE,YAAO,GAAP,OAAO,CAAQ;AAAE,QARvF,YAAO,GAAG,IAAI,eAAe,CAAc;AAC5C,YAAG,KAAK,EAAE,KAAK;AACf,YAAG,KAAK,EAAE,KAAK;AACf,YAAG,OAAO,EAAE,IAAI;AAChB,YAAG,KAAK,EAAE,SAAS;AACnB,SAAE,CAAC,CAAC;AACJ,QAGG,IAAI,CAAC,OAAO,EAAE;AACjB,YAAK,OAAO,GAAG,EAAE,CAAC;AAClB,SAAI;AACJ,QAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAC1D,QAAG,IAAI,CAAC,UAAU,EAAE,CAAC;AACrB,KAAE;AAEH;AACG;AAEH;AACG;AAAS,IADV,UAAU;AACX,QAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;AAChD;AACK,QAAF,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;AAEzC;AACK;AAA0B,cAArB,MAAM,sBAAuB,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAA;AACtE,QAAG,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACpC,QAAG,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;AAEnD;AACK,QAAD,MAAM,CAAC,gBAAgB,CAAC,OAAO;AAAQ;AACrB;AAAa,QADE;AACpC;AAA8B,kBAAnB,GAAG,GAAG,IAAI,KAAK,CAAC,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;AAC3E,YAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AAC/C,YAAK,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC7B,SAAI,GAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;AAExB;AACK,QAAD,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;AAC5C;AACK;AAA0B,cAAtB,IAAI,GAAG,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC1D,QAAG,IAAI,IAAI,EAAE;AACb,YAAK,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAChD,SAAI;AAAE,aAAI;AACV,YAAK,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;AACvC,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AAAiB;AAEC;AAAoB;AAAS,IAA3C,QAAQ,CAAC,MAAiC;AAAK;AAC3C,cAAJ,WAAW,GAAgB;AACpC,YAAK,KAAK,EAAE,KAAK;AACjB,YAAK,OAAO,EAAE,KAAK;AACnB,YAAK,KAAK,EAAE,KAAK;AACjB,YAAK,KAAK,EAAE,EAAE;AACd,SAAI;AACJ,QAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO;AAAO;AACnB;AACL;AACjB,QAHmC,GAAG;AACvC,YAAK,IAAI,GAAG,KAAK,OAAO,EAAE;AAC1B,gBAAO,IAAI,GAAG,KAAK,MAAM,EAAE;AAC3B,oBAAS,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AACjC,oBAAS,WAAW,CAAC,KAAK,GAAG,GAAG,CAAC;AACjC,iBAAQ;AAAE,qBAAI;AACd,oBAAS,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAClC,iBAAQ;AACR,aAAM;AACN,SAAI,EAAC,CAAC;AACN,QAAG,OAAO,WAAW,CAAC;AACtB,KAAE;AAEH;AACG;AACG;AAAiB;AAEC;AAAoB;AAAS,IAA3C,oBAAoB,CAAC,OAAqB;AAAK,QACrD,OAAO;AACV,YAAK,SAAS,EAAE,OAAO,CAAC,aAAa,GAAG,GAAG,OAAO,CAAC,aAAa,YAAY,GAAG,0BAA0B;AACzG,YAAK,cAAc,EAAE,gBAAgB;AACrC,YAAK,SAAS,EAAE,IAAI;AACpB,YAAK,oBAAoB;AAAQ;AACR;AAChB,YAFkB;AAC3B,gBAAO,IAAI,CAAC,OAAO,CAAC,GAAG;AAAO;AACD;AAClB,gBAFa;AACxB,oBAAS,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AACrC,oBAAS,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;AACnD,oBAAS,IAAI,OAAO,CAAC,eAAe,EAAE;AACtC,wBAAW,OAAO,CAAC,eAAe,EAAE,CAAC;AACrC,qBAAU;AACV,iBAAQ,EAAC,CAAC;AACV,aAAM,CAAA;AACN,SAAI,CAAC;AACL,KAAE;AACF;8CAhGA,UAAU,SAAC,mBACV,UAAU,EAAE,MAAM,eACnB,oDACK;AAAE;AAAoB;AAEU,4CAQvB,MAAM,SAAC,iBAAiB;AAAU,YAnBL,MAAM;AAAI;AAAI;;;;;;;;;2DAOvC;AACnB;AACW;AAEX,IAAE,mCAKG;AACJ;AAAsB,IAArB,wCAAiC;AAEnC;AAAS;AAAkB;AAAiB;AAAS,IAAW,mCAAuB;AAAE;AACxF;AAAK;AAG4B;AAAY;AAoF9C,iCAKC;AACA;AAAc;AAAsB,IALnC,uCAAkB;AACnB;AAAsB,IAArB,4CAAuB;AACxB;AACA,IADC,uCAAmB;AACpB;AAAsB,IAArB,kDAA+B;AAChC;AACC;AAAE;AAAK;AAAmC;AAA6C;AAAuI;AAAK,MCvGxN,eAAe;AAC3B;AAAS;AAA0B;AAAoB;AACrD,IADD,OAAO,OAAO,CAAC,MAAoB;AAAK,QACtC,OAAO;AACV,YAAK,QAAQ,EAAE,eAAe;AAC9B,YAAK,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;AAClE,SAAI,CAAC;AACL,KAAE;AACF;6CAZA,QAAQ,SAAC,mBACR,YAAY,EAAE,EAAE;eAChB,OAAO,EAAE,EAAE,mBACX,SAAS,EAAE,CAAC,gBAAgB,CAAC;AAC9B;;;;;;;;0BACK;AAAE;AAAkB,MASpB,CAAC,GAAG,CAAC;AACV;AAAE;AAAK;AAAmC;AAAkC;AAAuI;AAAK;AAAK;AAA4D;AAAY;AAAK,2BCJ1S;AAED;AAAc;AAAS;AAMF;AAAwD;AAAsB;AAAsB;AAA2B;AAA4B;AAAS,IAbvL,qCAAuB;AACxB;AACG;AAEH;AAA4B;AAGxB,IAHH,uCAA2B;AAC5B;AAEA;AAAK;AAAY;AAAK,0BAKtB;AACA;AAAc;AAAsB,IALnC,4BAAe;AAChB;AACE,IADD,8BAAiB;AAClB;AACI,IADH,4BAAe;AAChB;AAEG,IAFF,4BAAc;AACf;AACC;AAAE;AAAK;AAAmC;AAAkC;AAAuI;AAAK;AAAE;AAAK;AAAmC;AAAkC;AAAuI;AAAK;AAAE;AAAkE","sourcesContent":["import {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {OpenCVConfig, OpenCVState} from './models';\n\nexport const OpenCvConfigToken = new InjectionToken<OpenCVConfig>('OpenCV config object token');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxOpenCVService {\n\n  cvState = new BehaviorSubject<OpenCVState>({\n    ready: false,\n    error: false,\n    loading: true,\n    state: 'loading'\n  });\n  configModule: OpenCvConfigModule;\n\n  constructor(@Inject(OpenCvConfigToken) options: OpenCVConfig, private _ngZone: NgZone) {\n    if (!options) {\n      options = {};\n    }\n    this.configModule = this.generateConfigModule(options);\n    this.loadOpenCv();\n  }\n\n  /**\n   * load the OpenCV script\n   */\n  loadOpenCv() {\n    this.cvState.next( this.newState('loading'));\n    // create global module variable\n    window['Module'] = this.configModule;\n\n    // create script element and set attributes\n    const script = <HTMLScriptElement> document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n\n    // listen for errors\n    script.addEventListener('error', () => {\n      const err = new Error('Failed to load ' + this.configModule.scriptUrl);\n      this.cvState.next(this.newState('error'));\n      this.cvState.error(err);\n    }, {passive: true});\n\n    // set script url\n    script.src = this.configModule.scriptUrl;\n    // insert script as first script tag\n    const node = document.getElementsByTagName('script')[0];\n    if (node) {\n      node.parentNode.insertBefore(script, node);\n    } else {\n      document.head.appendChild(script);\n    }\n  }\n\n  /**\n   * generates a new state object\n   * @param change - the new state of the module\n   */\n  private newState(change: 'loading'|'ready'|'error'): OpenCVState {\n    const newStateObj: OpenCVState = {\n      ready: false,\n      loading: false,\n      error: false,\n      state: ''\n    };\n    Object.keys(newStateObj).forEach(key => {\n      if (key !== 'state') {\n        if (key === change) {\n          newStateObj[key] = true;\n          newStateObj.state = key;\n        } else {\n          newStateObj[key] = false;\n        }\n      }\n    });\n    return newStateObj;\n  }\n\n  /**\n   * generates a config module for the global Module object\n   * @param options - configuration options\n   */\n  private generateConfigModule(options: OpenCVConfig): OpenCvConfigModule {\n    return {\n      scriptUrl: options.openCVDirPath ? `${options.openCVDirPath}/opencv.js` : `/assets/opencv/opencv.js`,\n      wasmBinaryFile: 'opencv_js.wasm',\n      usingWasm: true,\n      onRuntimeInitialized: () => {\n        this._ngZone.run(() => {\n          console.log('openCV Ready');\n          this.cvState.next(this.newState('ready'));\n          if (options.runOnOpenCVInit) {\n            options.runOnOpenCVInit();\n          }\n        });\n      }\n    };\n  }\n}\n\n/**\n * describes the global Module object that is used to initiate OpenCV.js\n */\ninterface OpenCvConfigModule {\n  scriptUrl: string;\n  wasmBinaryFile: string;\n  usingWasm: boolean;\n  onRuntimeInitialized: Function;\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {OpenCVConfig} from './models';\nimport {NgxOpenCVService, OpenCvConfigToken} from './ngx-open-cv.service';\n\n\n@NgModule({\n  declarations: [],\n  exports: [],\n  providers: [NgxOpenCVService]\n})\nexport class NgxOpenCVModule {\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxOpenCVModule,\n      providers: [{ provide: OpenCvConfigToken, useValue: config }]\n    };\n  }\n}\n\nconst a = 0;\n","/**\n * describes a configuration object for the OpenCV service\n */\nexport interface OpenCVConfig {\n  /**\n   * path to the directory containing the OpenCV files, in the form of '/path/to/<opencv directory>'\n   * directory must contain the the following files:\n   * --<OpenCvDir>\n   * ----opencv.js\n   * ----opencv_js.wasm\n   */\n  openCVDirPath?: string;\n  /**\n   * additional callback that will run when OpenCv has finished loading and parsing\n   */\n  runOnOpenCVInit?: Function;\n}\n\nexport interface OpenCVState {\n  ready: boolean;\n  loading: boolean;\n  error: boolean;\n  state: string;\n}\n"]}