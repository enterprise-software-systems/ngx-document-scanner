{"version":3,"file":"ngx-document-scanner.mjs","sources":["../../../projects/ngx-document-scanner/src/lib/services/limits.service.ts","../../../projects/ngx-document-scanner/src/lib/components/draggable-point/ngx-draggable-point.component.ts","../../../projects/ngx-document-scanner/src/lib/components/draggable-point/ngx-draggable-point.component.html","../../../projects/ngx-document-scanner/src/lib/components/filter-menu/ngx-filter-menu.component.html","../../../projects/ngx-document-scanner/src/lib/components/filter-menu/ngx-filter-menu.component.ts","../../../projects/ngx-document-scanner/src/lib/components/shape-outline/ngx-shape-outline.component.html","../../../projects/ngx-document-scanner/src/lib/components/shape-outline/ngx-shape-outline.component.ts","../../../projects/ngx-document-scanner/src/lib/components/image-editor/ngx-doc-scanner.component.html","../../../projects/ngx-document-scanner/src/lib/components/image-editor/ngx-doc-scanner.component.ts","../../../projects/ngx-document-scanner/src/lib/ngx-document-scanner.module.ts","../../../projects/ngx-document-scanner/src/public_api.ts","../../../projects/ngx-document-scanner/src/ngx-document-scanner.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {ImageDimensions} from '../PublicModels';\r\nimport {LimitException, XYPosition} from '../PrivateModels';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LimitsService {\r\n\r\n\r\n  private limitDirections: RolesArray = ['left', 'right', 'top', 'bottom'];\r\n  /**\r\n   * stores the crop limits limits\r\n   */\r\n  private _limits = {\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n    left: 0\r\n  };\r\n  /**\r\n   * stores the array of the draggable points displayed on the crop area\r\n   */\r\n  private _points: Array<PointPositionChange> = [];\r\n  /**\r\n   * stores the pane dimensions\r\n   */\r\n  private _paneDimensions: ImageDimensions;\r\n\r\n  // *********** //\r\n  // Observables //\r\n  // *********** //\r\n  public positions: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>(Array.from(this._points));\r\n  public repositionEvent: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>([]);\r\n  public limits: BehaviorSubject<AreaLimits> = new BehaviorSubject<AreaLimits>(this._limits);\r\n  public paneDimensions: BehaviorSubject<ImageDimensions> = new BehaviorSubject({width: 0, height: 0});\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * set privew pane dimensions\r\n   */\r\n  public setPaneDimensions(dimensions: ImageDimensions) {\r\n    return new Promise((resolve, reject) => {\r\n      this._paneDimensions = dimensions;\r\n      this.paneDimensions.next(dimensions);\r\n      resolve(dimensions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * repositions points externally\r\n   */\r\n  public repositionPoints(positions) {\r\n    this._points = positions;\r\n    positions.forEach(position => {\r\n      this.positionChange(position);\r\n    });\r\n    this.repositionEvent.next(positions);\r\n  }\r\n\r\n  /**\r\n   * updates limits and point positions and calls next on the observables\r\n   * @param positionChangeData - position change event data\r\n   */\r\n  public positionChange(positionChangeData: PointPositionChange) {\r\n    // update positions according to current position change\r\n    this.updatePosition(positionChangeData);\r\n\r\n    // for each direction:\r\n    // 1. filter the _points that have a role as the direction's limit\r\n    // 2. for top and left find max x | y values, and min for right and bottom\r\n    this.limitDirections.forEach(direction => {\r\n      const relevantPoints = this._points.filter(point => {\r\n        return point.roles.includes(direction);\r\n      })\r\n      .map((point: PointPositionChange) => {\r\n        return point[this.getDirectionAxis(direction)];\r\n      });\r\n      let limit;\r\n      if (direction === 'top' || direction === 'left') {\r\n        limit = Math.max(...relevantPoints);\r\n      }\r\n      if (direction === 'right' || direction === 'bottom') {\r\n        limit = Math.min(...relevantPoints);\r\n      }\r\n      this._limits[direction] = limit;\r\n    });\r\n\r\n    this.limits.next(this._limits);\r\n    this.positions.next(Array.from(this._points));\r\n  }\r\n\r\n  /**\r\n   * updates the position of the point\r\n   * @param positionChange - position change event data\r\n   */\r\n  public updatePosition(positionChange: PointPositionChange) {\r\n    // finds the current position of the point by it's roles, than splices it for the new position or pushes it if it's not yet in the array\r\n    const index = this._points.findIndex(point => {\r\n      return this.compareArray(positionChange.roles, point.roles);\r\n    });\r\n    if (index === -1) {\r\n      this._points.push(positionChange);\r\n    } else {\r\n      this._points.splice(index, 1, positionChange);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * check if a position change event exceeds the limits\r\n   * @param positionChange - position change event data\r\n   * @returns LimitException0\r\n   */\r\n  public exceedsLimit(positionChange: PointPositionChange): LimitException {\r\n    const pointLimits = this.limitDirections.filter(direction => {\r\n      return !positionChange.roles.includes(direction);\r\n    });\r\n\r\n    const limitException: LimitException = {\r\n      exceeds: false,\r\n      resetCoefficients: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      resetCoordinates: {\r\n        x: positionChange.x,\r\n        y: positionChange.y\r\n      }\r\n    };\r\n\r\n    // limit directions are the opposite sides of the point's roles\r\n    pointLimits.forEach(direction => {\r\n      const directionAxis = this.getDirectionAxis(direction);\r\n      if (direction === 'top' || direction === 'left') {\r\n        if (positionChange[directionAxis] < this._limits[direction]) {\r\n          limitException.resetCoefficients[directionAxis] = 1;\r\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\r\n        }\r\n      } else if (direction === 'right' || direction === 'bottom') {\r\n        if (positionChange[directionAxis] > this._limits[direction]) {\r\n          limitException.resetCoefficients[directionAxis] = -1;\r\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (limitException.resetCoefficients.x !== 0 || limitException.resetCoefficients.y !== 0) {\r\n      limitException.exceeds = true;\r\n    }\r\n\r\n    return limitException;\r\n  }\r\n\r\n  /**\r\n   * rotate crop tool points clockwise\r\n   * @param resizeRatios - ratio between the new dimensions and the previous\r\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\r\n   * @param initialPositions - current positions before rotation\r\n   */\r\n  public rotateClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\r\n    // convert positions to ratio between position to initial pane dimension\r\n    initialPositions = initialPositions.map(point => {\r\n      return new PositionChangeData({\r\n        x: point.x / initialPreviewDimensions.width,\r\n        y: point.y / initialPreviewDimensions.height,\r\n      }, point.roles);\r\n    });\r\n    this.repositionPoints(initialPositions.map(point => {\r\n      return this.rotateCornerClockwise(point);\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * rotate crop tool points anti-clockwise\r\n   * @param resizeRatios - ratio between the new dimensions and the previous\r\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\r\n   * @param initialPositions - current positions before rotation\r\n   */\r\n  public rotateAntiClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\r\n    // convert positions to ratio between position to initial pane dimension\r\n    initialPositions = initialPositions.map(point => {\r\n      return new PositionChangeData({\r\n        x: point.x / initialPreviewDimensions.width,\r\n        y: point.y / initialPreviewDimensions.height,\r\n      }, point.roles);\r\n    });\r\n    this.repositionPoints(initialPositions.map(point => {\r\n      return this.rotateCornerAntiClockwise(point);\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * returns the corner positions after a 90 degrees clockwise rotation\r\n   */\r\n  private rotateCornerClockwise(corner: PointPositionChange): PointPositionChange {\r\n    const rotated: PointPositionChange = {\r\n      x: this._paneDimensions.width * (1 - corner.y),\r\n      y: this._paneDimensions.height * corner.x,\r\n      roles: []\r\n    };\r\n    // rotates corner according to order\r\n    const order: Array<RolesArray> = [\r\n      ['bottom', 'left'],\r\n      ['top', 'left'],\r\n      ['top', 'right'],\r\n      ['bottom', 'right'],\r\n      ['bottom', 'left']\r\n    ];\r\n    rotated.roles = order[order.findIndex(roles => {\r\n      return this.compareArray(roles, corner.roles);\r\n    }) + 1];\r\n    return rotated;\r\n  }\r\n\r\n  /**\r\n   * returns the corner positions after a 90 degrees anti-clockwise rotation\r\n   */\r\n  private rotateCornerAntiClockwise(corner: PointPositionChange): PointPositionChange {\r\n    const rotated: PointPositionChange = {\r\n      x: this._paneDimensions.width * corner.y,\r\n      y: this._paneDimensions.height * (1 - corner.x),\r\n      roles: []\r\n    };\r\n    // rotates corner according to order\r\n    const order: Array<RolesArray> = [\r\n      ['bottom', 'left'],\r\n      ['bottom', 'right'],\r\n      ['top', 'right'],\r\n      ['top', 'left'],\r\n      ['bottom', 'left']\r\n    ];\r\n    rotated.roles = order[order.findIndex(roles => {\r\n      return this.compareArray(roles, corner.roles);\r\n    }) + 1];\r\n    return rotated;\r\n  }\r\n\r\n  /**\r\n   * checks if two array contain the same values\r\n   * @param array1 - array 1\r\n   * @param array2 - array 2\r\n   * @returns boolean\r\n   */\r\n  public compareArray(array1: Array<string>, array2: Array<string>): boolean {\r\n    return array1.every((element) => {\r\n      return array2.includes(element);\r\n    }) && array1.length === array2.length;\r\n  }\r\n\r\n  private getDirectionAxis(direction) {\r\n    return {\r\n      left: 'x',\r\n      right: 'x',\r\n      top: 'y',\r\n      bottom: 'y'\r\n    }[direction];\r\n  }\r\n}\r\n\r\n\r\nexport interface PointPositionChange {\r\n  x: number;\r\n  y: number;\r\n  roles: RolesArray;\r\n}\r\n\r\nexport interface AreaLimits {\r\n  top: number;\r\n  bottom: number;\r\n  right: number;\r\n  left: number;\r\n}\r\n\r\nexport type RolesArray = Array<Direction>;\r\n\r\nexport class PositionChangeData implements PointPositionChange {\r\n  x: number;\r\n  y: number;\r\n  roles: RolesArray;\r\n\r\n  constructor(position: XYPosition, roles: RolesArray) {\r\n    this.x = position.x;\r\n    this.y = position.y;\r\n    this.roles = roles;\r\n  }\r\n}\r\n\r\nexport type Direction = 'left' | 'right' | 'top' | 'bottom';\r\n","import {AfterViewInit, Component, HostListener, Input} from '@angular/core';\r\nimport {LimitsService, PointPositionChange, PositionChangeData} from '../../services/limits.service';\r\nimport {ImageDimensions} from '../../PublicModels';\r\nimport {LimitException, XYPosition} from '../../PrivateModels';\r\n\r\n@Component({\r\n  selector: 'ngx-draggable-point',\r\n  templateUrl: './ngx-draggable-point.component.html',\r\n  styleUrls: ['./ngx-draggable-point.component.scss']\r\n})\r\nexport class NgxDraggablePointComponent implements AfterViewInit {\r\n  @Input() width = 10;\r\n  @Input() height = 10;\r\n  @Input() color = '#3cabe2';\r\n  @Input() shape: 'rect' | 'circle' = 'rect';\r\n  @Input() pointOptions: 'rect' | 'circle' = 'rect';\r\n  @Input() limitRoles: Array<'left' | 'right' | 'top' | 'bottom'>;\r\n  @Input() startPosition: XYPosition;\r\n  @Input() container: HTMLElement;\r\n  @Input() private _currentPosition: XYPosition;\r\n  hover = false;\r\n  clicking = false;\r\n  position: XYPosition = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  private _paneDimensions: ImageDimensions;\r\n  resetPosition: XYPosition;\r\n\r\n  constructor(private limitsService: LimitsService) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    Object.keys(this.pointOptions).forEach(key => {\r\n      this[key] = this.pointOptions[key];\r\n    });\r\n    // subscribe to pane dimensions changes\r\n    this.limitsService.paneDimensions.subscribe(dimensions => {\r\n      if (dimensions.width > 0 && dimensions.width > 0) {\r\n        this._paneDimensions = {\r\n          width: dimensions.width,\r\n          height: dimensions.height\r\n        };\r\n        this.position = this.getInitialPosition(dimensions);\r\n        this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\r\n      }\r\n    });\r\n    // subscribe to external reposition events\r\n    this.limitsService.repositionEvent.subscribe(positions => {\r\n      if (positions.length > 0) {\r\n        this.externalReposition(positions);\r\n      }\r\n    });\r\n  }\r\n\r\n  @HostListener('window:mouseup', ['$event'])\r\n  mouseUp(event) {\r\n    this.clicking = false;\r\n    this.hover = false;\r\n  }\r\n\r\n  /**\r\n   * returns a css style object for the point\r\n   */\r\n  pointStyle() {\r\n    return {\r\n      width: this.width + 'px',\r\n      height: this.height + 'px',\r\n      'background-color': this.color,\r\n      'border-radius': this.shape === 'circle' ? '100%' : 0,\r\n      position: 'absolute'\r\n    };\r\n  }\r\n\r\n  hoverPointStyle() {\r\n    return {\r\n      ...this.pointStyle(),\r\n      cursor: 'grab',\r\n      'background-color': '#CCFF33'\r\n    };\r\n  }\r\n\r\n  clickingPointStyle() {\r\n    return {\r\n      ...this.hoverPointStyle(),\r\n      cursor: 'grabbing'\r\n    };\r\n  }\r\n\r\n  getStyle() {\r\n    if (this.clicking) {\r\n      return this.clickingPointStyle();\r\n    } else if (this.hover) {\r\n      return this.hoverPointStyle();\r\n    }\r\n\r\n    return this.pointStyle();\r\n  }\r\n\r\n  /**\r\n   * registers a position change on the limits service, and adjusts position if necessary\r\n   * @param position - the current position of the point\r\n   */\r\n  positionChange(position: XYPosition) {\r\n    const positionChangeData = new PositionChangeData(position, this.limitRoles);\r\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\r\n    if (limitException.exceeds) {\r\n      // if exceeds limits, reposition\r\n      this.resetPosition = limitException.resetCoordinates;\r\n    } else {\r\n      this.limitsService.positionChange(positionChangeData);\r\n      this._currentPosition = position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * adjusts the position of the point after a limit exception\r\n   */\r\n  private adjustPosition(limitException: LimitException) {\r\n    const newPosition = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    Object.keys(this.startPosition).forEach(axis => {\r\n      newPosition[axis] = limitException.resetCoordinates[axis] + limitException.resetCoefficients[axis];\r\n    });\r\n    this.position = newPosition;\r\n    this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\r\n  }\r\n\r\n  /**\r\n   * called on movement end, checks if last position exceeded the limits ad adjusts\r\n   */\r\n  movementEnd(position: XYPosition) {\r\n    let positionChangeData = new PositionChangeData(position, this.limitRoles);\r\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\r\n    if (limitException.exceeds) {\r\n      this.resetPosition = limitException.resetCoordinates;\r\n      if (limitException.exceeds) {\r\n        this.adjustPosition(limitException);\r\n        positionChangeData = new PositionChangeData(this.position, this.limitRoles);\r\n        this.limitsService.updatePosition(positionChangeData);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * calculates the initial positions of the point by it's roles\r\n   * @param dimensions - dimensions of the pane in which the point is located\r\n   */\r\n  private getInitialPosition(dimensions: ImageDimensions) {\r\n    return {\r\n      x: this.limitRoles.includes('left') ? 0 : dimensions.width - this.width / 2,\r\n      y: this.limitRoles.includes('top') ? 0 : dimensions.height - this.height / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * repositions the point after an external reposition event\r\n   * @param positions - an array of all points on the pane\r\n   */\r\n  private externalReposition(positions: Array<PointPositionChange>) {\r\n    positions.forEach(position => {\r\n      if (this.limitsService.compareArray(this.limitRoles, position.roles)) {\r\n        position = this.enforcePaneLimits(position);\r\n        this.position = {\r\n          x: position.x,\r\n          y: position.y\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns a new point position if the movement exceeded the pane limit\r\n   */\r\n  private enforcePaneLimits(position: PointPositionChange): PointPositionChange {\r\n    if (this._paneDimensions.width === 0 || this._paneDimensions.height === 0) {\r\n      return position;\r\n    } else {\r\n      if (position.x > this._paneDimensions.width) {\r\n        position.x = this._paneDimensions.width;\r\n      }\r\n      if (position.x < 0) {\r\n        position.x = 1;\r\n      }\r\n      if (position.y > this._paneDimensions.height) {\r\n        position.y = this._paneDimensions.height;\r\n      }\r\n      if (position.y < 0) {\r\n        position.y = 1;\r\n      }\r\n    }\r\n    return position;\r\n  }\r\n}\r\n\r\n","<div #point ngDraggable=\"draggable\"\r\n     (movingOffset)=\"positionChange($event)\"\r\n     [ngStyle]=\"getStyle()\"\r\n     (mousedown)=\"clicking=true\"\r\n     (mouseup)=\"clicking=false\"\r\n     (mouseover)=\"hover=true\"\r\n     (mouseleave)=\"hover=false\"\r\n     [position]=\"position\"\r\n     [bounds]=\"container\"\r\n     [inBounds]=\"true\"\r\n     (endOffset)=\"movementEnd($event)\"\r\n     style=\"z-index: 1000\">\r\n</div>\r\n","<mat-action-list>\r\n  <button mat-list-item *ngFor=\"let option of filterOptions\" (click)=\"selectOption(option.name)\">\r\n    <mat-icon>{{option.icon}}</mat-icon>\r\n    <span fxFlex=\"100\" style=\"text-align: start; margin: 5px\">{{option.text}}</span>\r\n    <span fxFlex=\"100\"></span>\r\n    <mat-icon *ngIf=\"option.name === data.filter\">done</mat-icon>\r\n  </button>\r\n</mat-action-list>\r\n","import {Component, EventEmitter, Inject, Output} from '@angular/core';\r\nimport {EditorActionButton} from '../../PrivateModels';\r\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef} from '@angular/material/bottom-sheet';\r\n\r\n@Component({\r\n  selector: 'ngx-filter-menu',\r\n  templateUrl: './ngx-filter-menu.component.html',\r\n})\r\nexport class NgxFilterMenuComponent {\r\n  filterOptions: Array<EditorActionButton> = [\r\n    {\r\n      name: 'default',\r\n      icon: 'filter_b_and_w',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W'\r\n    },\r\n    {\r\n      name: 'bw2',\r\n      icon: 'filter_b_and_w',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W 2'\r\n    },\r\n    {\r\n      name: 'bw3',\r\n      icon: 'blur_on',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W 3'\r\n    },\r\n    {\r\n      name: 'magic_color',\r\n      icon: 'filter_vintage',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'Magic Color'\r\n    },\r\n    {\r\n      name: 'original',\r\n      icon: 'crop_original',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'Original'\r\n    },\r\n  ];\r\n  @Output() filterSelected: EventEmitter<string> = new EventEmitter();\r\n  selectOption(optionName) {\r\n    this.data.filter = optionName;\r\n    this.bottomSheetRef.dismiss();\r\n  }\r\n\r\n  constructor(private bottomSheetRef: MatBottomSheetRef<NgxFilterMenuComponent>,\r\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\r\n              ) {}\r\n\r\n}\r\n","<canvas #outline\r\n        style=\"position: absolute; z-index: 1000\"\r\n        [ngStyle]=\"{width: dimensions.width + 'px', height: dimensions.height + 'px'}\"\r\n        *ngIf=\"dimensions\">\r\n</canvas>\r\n","import {AfterViewInit, Component, Input, ViewChild} from '@angular/core';\r\nimport {LimitsService, PointPositionChange} from '../../services/limits.service';\r\nimport {ImageDimensions} from '../../PublicModels';\r\n\r\n@Component({\r\n  selector: 'ngx-shape-outine',\r\n  templateUrl: './ngx-shape-outline.component.html',\r\n})\r\nexport class NgxShapeOutlineComponent implements AfterViewInit {\r\n\r\n  @Input() color = '#3cabe2';\r\n  @Input() weight: number;\r\n  @Input() dimensions: ImageDimensions;\r\n  @ViewChild('outline') canvas;\r\n\r\n  private _points: Array<PointPositionChange>;\r\n  private _sortedPoints: Array<PointPositionChange>;\r\n  constructor(private limitsService: LimitsService) {}\r\n\r\n  ngAfterViewInit() {\r\n    // init drawing canvas dimensions\r\n    this.canvas.nativeElement.width = this.dimensions.width;\r\n    this.canvas.nativeElement.height = this.dimensions.height;\r\n    this.limitsService.positions.subscribe(positions => {\r\n      if (positions.length === 4) {\r\n        this._points = positions;\r\n        this.sortPoints();\r\n        this.clearCanvas();\r\n        this.drawShape();\r\n      }\r\n    });\r\n    // subscribe to changes in the pane's dimensions\r\n    this.limitsService.paneDimensions.subscribe(dimensions => {\r\n      this.clearCanvas();\r\n      this.canvas.nativeElement.width = dimensions.width;\r\n      this.canvas.nativeElement.height = dimensions.height;\r\n    });\r\n    // subscribe to reposition events\r\n    this.limitsService.repositionEvent.subscribe( positions => {\r\n      if (positions.length === 4) {\r\n        setTimeout( () => {\r\n          this.clearCanvas();\r\n          this.sortPoints();\r\n          this.drawShape();\r\n        }, 10);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * clears the shape canvas\r\n   */\r\n  private clearCanvas() {\r\n    const canvas = this.canvas.nativeElement;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\r\n  }\r\n\r\n  /**\r\n   * sorts the array of points according to their clockwise alignment\r\n   */\r\n  private sortPoints() {\r\n    const _points = Array.from(this._points);\r\n    const sortedPoints = [];\r\n\r\n    const sortOrder = {\r\n      vertical: ['top', 'top', 'bottom', 'bottom'],\r\n      horizontal: ['left', 'right', 'right', 'left']\r\n    };\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      const roles = Array.from([sortOrder.vertical[i], sortOrder.horizontal[i]]);\r\n      sortedPoints.push(_points.filter((point) => {\r\n        return this.limitsService.compareArray(point.roles, roles);\r\n      })[0]);\r\n\r\n    }\r\n    this._sortedPoints = sortedPoints;\r\n  }\r\n\r\n  /**\r\n   * draws a line between the points according to their order\r\n   */\r\n  private drawShape() {\r\n    const canvas = this.canvas.nativeElement;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.lineWidth = this.weight;\r\n    ctx.strokeStyle = this.color;\r\n    ctx.beginPath();\r\n    this._sortedPoints.forEach((point, index) => {\r\n      if (index === 0) {\r\n        ctx.moveTo(point.x, point.y);\r\n      }\r\n      if (index !== this._sortedPoints.length - 1) {\r\n        const nextPoint = this._sortedPoints[index + 1];\r\n        ctx.lineTo(nextPoint.x, nextPoint.y);\r\n      } else {\r\n        ctx.closePath();\r\n      }\r\n    });\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n\r\n","<div [ngStyle]=\"getStoyle()\" fxLayout=\"column\" fxLayoutAlign=\"space-around\" style=\"direction: ltr !important\">\r\n  <div #imageContainer [ngStyle]=\"imageDivStyle\" style=\"margin: auto;\">\r\n    <ng-container *ngIf=\"imageLoaded && mode === 'crop'\">\r\n      <ngx-shape-outine #shapeOutline [color]=\"options.cropToolColor\"\r\n                        [weight]=\"options.cropToolLineWeight\"\r\n                        [dimensions]=\"previewDimensions\"></ngx-shape-outine>\r\n      <ngx-draggable-point #topLeft [pointOptions]=\"options.pointOptions\"\r\n                           [startPosition]=\"{x: 0, y: 0}\" [limitRoles]=\"['top', 'left']\"\r\n                           [container]=\"imageContainer\"></ngx-draggable-point>\r\n      <ngx-draggable-point #topRight [pointOptions]=\"options.pointOptions\"\r\n                           [startPosition]=\"{x: previewDimensions.width, y: 0}\"\r\n                           [limitRoles]=\"['top', 'right']\"\r\n                           [container]=\"imageContainer\"></ngx-draggable-point>\r\n      <ngx-draggable-point #bottomLeft [pointOptions]=\"options.pointOptions\"\r\n                           [startPosition]=\"{x: 0, y: previewDimensions.height}\"\r\n                           [limitRoles]=\"['bottom', 'left']\"\r\n                           [container]=\"imageContainer\"></ngx-draggable-point>\r\n      <ngx-draggable-point #bottomRight [pointOptions]=\"options.pointOptions\"\r\n                           [startPosition]=\"{x: previewDimensions.width, y: previewDimensions.height}\"\r\n                           [limitRoles]=\"['bottom', 'right']\"\r\n                           [container]=\"imageContainer\"></ngx-draggable-point>\r\n    </ng-container>\r\n    <canvas #PreviewCanvas [ngStyle]=\"{'max-width': options.maxPreviewWidth}\"\r\n            style=\"z-index: 5\"></canvas>\r\n  </div>\r\n<!--  <div fxLayout=\"column\" style=\"width: 100vw\">-->\r\n<!--    <div class=\"editor-actions\" fxLayout=\"row\" fxLayoutAlign=\"space-around\">-->\r\n<!--      <ng-container *ngFor=\"let button of displayedButtons\" [ngSwitch]=\"button.type\">-->\r\n<!--        <button mat-mini-fab *ngSwitchCase=\"'fab'\" [name]=\"button.name\" (click)=\"button.action()\"-->\r\n<!--                [color]=\"options.buttonThemeColor\">-->\r\n<!--          <mat-icon>{{button.icon}}</mat-icon>-->\r\n<!--        </button>-->\r\n<!--        <button mat-raised-button *ngSwitchCase=\"'button'\" [name]=\"button.name\"-->\r\n<!--                (click)=\"button.action()\" [color]=\"options.buttonThemeColor\">-->\r\n<!--          <mat-icon>{{button.icon}}</mat-icon>-->\r\n<!--          <span>{{button.text}}}</span>-->\r\n<!--        </button>-->\r\n<!--      </ng-container>-->\r\n<!--    </div>-->\r\n<!--  </div>-->\r\n\r\n</div>\r\n\r\n\r\n","import {Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {LimitsService, PointPositionChange, PositionChangeData, RolesArray} from '../../services/limits.service';\r\nimport {MatBottomSheet} from '@angular/material/bottom-sheet';\r\nimport {NgxFilterMenuComponent} from '../filter-menu/ngx-filter-menu.component';\r\nimport {EditorActionButton, PointOptions, PointShape} from '../../PrivateModels';\r\n// import {NgxOpenCVService} from '../../services/ngx-opencv.service';\r\nimport {DocScannerConfig, ImageDimensions, OpenCVState} from '../../PublicModels';\r\nimport {NgxOpenCVService} from 'ngx-opencv';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\ndeclare var cv: any;\r\n\r\n@Component({\r\n  selector: 'ngx-doc-scanner',\r\n  templateUrl: './ngx-doc-scanner.component.html',\r\n  styleUrls: ['./ngx-doc-scanner.component.scss']\r\n})\r\nexport class NgxDocScannerComponent implements OnInit, OnChanges {\r\n  value = 0;\r\n\r\n  /**\r\n   * editor config object\r\n   */\r\n  options: ImageEditorConfig;\r\n  // ************* //\r\n  // EDITOR CONFIG //\r\n  // ************* //\r\n  /**\r\n   * an array of action buttons displayed on the editor screen\r\n   */\r\n  private editorButtons: Array<EditorActionButton>;\r\n\r\n  /**\r\n   * returns an array of buttons according to the editor mode\r\n   */\r\n  get displayedButtons() {\r\n    return this.editorButtons.filter(button => {\r\n      return button.mode === this.mode;\r\n    });\r\n  }\r\n\r\n  private maxPreviewHeight: number;\r\n  /**\r\n   * max width of the preview area\r\n   */\r\n  private maxPreviewWidth: number;\r\n  /**\r\n   * dimensions of the image container\r\n   */\r\n  imageDivStyle: any;\r\n  /**\r\n   * editor div style\r\n   */\r\n  editorStyle: { [key: string]: string | number };\r\n\r\n  // ************* //\r\n  // EDITOR STATE //\r\n  // ************* //\r\n  /**\r\n   * state of opencv loading\r\n   */\r\n  private cvState: string;\r\n  /**\r\n   * true after the image is loaded and preview is displayed\r\n   */\r\n  imageLoaded = false;\r\n  /**\r\n   * editor mode\r\n   */\r\n  mode: 'crop' | 'color' = 'crop';\r\n  /**\r\n   * filter selected by the user, returned by the filter selector bottom sheet\r\n   */\r\n  private selectedFilter = 'default';\r\n\r\n  // ******************* //\r\n  // OPERATION VARIABLES //\r\n  // ******************* //\r\n  /**\r\n   * viewport dimensions\r\n   */\r\n  private screenDimensions: ImageDimensions;\r\n  /**\r\n   * image dimensions\r\n   */\r\n  private imageDimensions: ImageDimensions = {\r\n    width: 0,\r\n    height: 0\r\n  };\r\n  /**\r\n   * dimensions of the preview pane\r\n   */\r\n  previewDimensions: ImageDimensions;\r\n  /**\r\n   * ration between preview image and original\r\n   */\r\n  private imageResizeRatio: number;\r\n  /**\r\n   * stores the original image for reset purposes\r\n   */\r\n  private originalImage: File;\r\n  /**\r\n   * stores the edited image\r\n   */\r\n  private editedImage: HTMLCanvasElement;\r\n  /**\r\n   * stores the preview image as canvas\r\n   */\r\n  @ViewChild('PreviewCanvas', {read: ElementRef}) private previewCanvas: ElementRef;\r\n  /**\r\n   * an array of points used by the crop tool\r\n   */\r\n  private points: Array<PointPositionChange>;\r\n\r\n  // ************** //\r\n  // EVENT EMITTERS //\r\n  // ************** //\r\n  /**\r\n   * optional binding to the exit button of the editor\r\n   */\r\n  @Output() exitEditor: EventEmitter<string> = new EventEmitter<string>();\r\n  /**\r\n   * fires on edit completion\r\n   */\r\n  @Output() editResult: EventEmitter<Blob> = new EventEmitter<Blob>();\r\n  /**\r\n   * emits errors, can be linked to an error handler of choice\r\n   */\r\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\r\n  /**\r\n   * emits the loading status of the cv module.\r\n   */\r\n  @Output() ready: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  /**\r\n   * emits true when processing is done, false when completed\r\n   */\r\n  @Output() processing: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  // ****** //\r\n  // INPUTS //\r\n  // ****** //\r\n  /**\r\n   * set image for editing\r\n   * @param file - file from form input\r\n   */\r\n  @Input() set file(file: File) {\r\n    if (file) {\r\n      setTimeout(() => {\r\n        this.processing.emit(true);\r\n      }, 5);\r\n      this.imageLoaded = false;\r\n      this.originalImage = file;\r\n      this.ngxOpenCv.cvState.subscribe(\r\n        async (cvState: OpenCVState) => {\r\n          if (cvState.ready) {\r\n            // read file to image & canvas\r\n            await this.loadFile(file);\r\n            this.processing.emit(false);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * editor configuration object\r\n   */\r\n  @Input() config: DocScannerConfig;\r\n\r\n  constructor(private ngxOpenCv: NgxOpenCVService, private limitsService: LimitsService,\r\n              private bottomSheet: MatBottomSheet, private sanitizer: DomSanitizer) {\r\n    this.screenDimensions = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    };\r\n\r\n    // subscribe to status of cv module\r\n    this.ngxOpenCv.cvState.subscribe((cvState: OpenCVState) => {\r\n      this.cvState = cvState.state;\r\n      this.ready.emit(cvState.ready);\r\n      if (cvState.error) {\r\n        this.error.emit(new Error('error loading cv'));\r\n      } else if (cvState.loading) {\r\n        this.processing.emit(true);\r\n      } else if (cvState.ready) {\r\n        this.processing.emit(false);\r\n      }\r\n    });\r\n\r\n    // subscribe to positions of crop tool\r\n    this.limitsService.positions.subscribe(points => {\r\n      this.points = points;\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editorButtons = [\r\n      {\r\n        name: 'exit',\r\n        action: () => {\r\n          this.exitEditor.emit('canceled');\r\n        },\r\n        icon: 'arrow_back',\r\n        type: 'fab',\r\n        mode: 'crop'\r\n      },\r\n      {\r\n        name: 'rotate',\r\n        action: this.rotateImage.bind(this),\r\n        icon: 'rotate_right',\r\n        type: 'fab',\r\n        mode: 'crop'\r\n      },\r\n      {\r\n        name: 'done_crop',\r\n        action: this.doneCrop(),\r\n        icon: 'done',\r\n        type: 'fab',\r\n        mode: 'crop'\r\n      },\r\n      {\r\n        name: 'back',\r\n        action: this.undo(),\r\n        icon: 'arrow_back',\r\n        type: 'fab',\r\n        mode: 'color'\r\n      },\r\n      {\r\n        name: 'filter',\r\n        action: () => {\r\n          if (this.config.filterEnable) {\r\n            return this.chooseFilters();\r\n          }\r\n        },\r\n        icon: 'photo_filter',\r\n        type: 'fab',\r\n        mode: this.config.filterEnable ? 'color' : 'disabled'\r\n      },\r\n      {\r\n        name: 'upload',\r\n        action: this.exportImage.bind(this),\r\n        icon: 'cloud_upload',\r\n        type: 'fab',\r\n        mode: 'color'\r\n      },\r\n    ];\r\n\r\n    // set options from config object\r\n    this.options = new ImageEditorConfig(this.config);\r\n    // set export image icon\r\n    this.editorButtons.forEach(button => {\r\n      if (button.name === 'upload') {\r\n        button.icon = this.options.exportImageIcon;\r\n      }\r\n    });\r\n    this.maxPreviewWidth = this.options.maxPreviewWidth;\r\n    this.maxPreviewHeight = this.options.maxPreviewHeight;\r\n    this.editorStyle = this.options.editorStyle;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.config) {\r\n      if (!changes.config.previousValue) {\r\n        return;\r\n      }\r\n      if (changes.config.currentValue.thresholdInfo.thresh !== changes.config.previousValue.thresholdInfo.thresh) {\r\n        this.loadFile(this.originalImage);\r\n      }\r\n      let updatePreview = false;\r\n      if (changes.config.currentValue.maxPreviewWidth !== changes.config.previousValue.maxPreviewWidth) {\r\n        this.maxPreviewWidth = changes.config.currentValue.maxPreviewWidth;\r\n        updatePreview = true;\r\n      }\r\n      if (changes.config.currentValue.maxPreviewHeight !== changes.config.previousValue.maxPreviewHeight) {\r\n        this.maxPreviewHeight = changes.config.currentValue.maxPreviewHeight;\r\n        updatePreview = true;\r\n      }\r\n      if (changes.config.currentValue.editorDimensions !== changes.config.previousValue.editorDimensions) {\r\n        const obj = {...this.editorStyle};\r\n        Object.assign(obj, changes.config.currentValue.editorDimensions);\r\n        this.editorStyle = obj;\r\n        updatePreview = true;\r\n      }\r\n      if (updatePreview) {\r\n        this.doubleRotate();\r\n      }\r\n    }\r\n  }\r\n\r\n  // ***************************** //\r\n  // editor action buttons methods //\r\n  // ***************************** //\r\n\r\n  /**\r\n   * emits the exitEditor event\r\n   */\r\n  exit() {\r\n    this.exitEditor.emit('canceled');\r\n  }\r\n\r\n  getMode(): string {\r\n    return this.mode;\r\n  }\r\n\r\n  async doneCrop() {\r\n    this.mode = 'color';\r\n    await this.transform();\r\n    if (this.config.filterEnable) {\r\n      await this.applyFilter(true);\r\n    }\r\n  }\r\n\r\n  undo() {\r\n    this.mode = 'crop';\r\n    this.loadFile(this.originalImage);\r\n  }\r\n\r\n  /**\r\n   * applies the selected filter, and when done emits the resulted image\r\n   */\r\n  async exportImage() {\r\n    await this.applyFilter(false);\r\n    if (this.options.maxImageDimensions) {\r\n      this.resize(this.editedImage)\r\n      .then(resizeResult => {\r\n        resizeResult.toBlob((blob) => {\r\n          this.editResult.emit(blob);\r\n          this.processing.emit(false);\r\n        }, 'image/jpeg', 0.8);\r\n      });\r\n    } else {\r\n      this.editedImage.toBlob((blob) => {\r\n        this.editResult.emit(blob);\r\n        this.processing.emit(false);\r\n      }, 'image/jpeg', 0.8);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\r\n   */\r\n  private chooseFilters() {\r\n    const data = {filter: this.selectedFilter};\r\n    const bottomSheetRef = this.bottomSheet.open(NgxFilterMenuComponent, {\r\n      data: data\r\n    });\r\n    bottomSheetRef.afterDismissed().subscribe(() => {\r\n      this.selectedFilter = data.filter;\r\n      this.applyFilter(true);\r\n    });\r\n\r\n  }\r\n\r\n  // *************************** //\r\n  // File Input & Output Methods //\r\n  // *************************** //\r\n  /**\r\n   * load image from input field\r\n   */\r\n  private loadFile(file: File) {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.processing.emit(true);\r\n      try {\r\n        await this.readImage(file);\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error.emit(new Error(err));\r\n      }\r\n      try {\r\n        await this.showPreview();\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error.emit(new Error(err));\r\n      }\r\n      // set pane limits\r\n      // show points\r\n      this.imageLoaded = true;\r\n      await this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\r\n      setTimeout(async () => {\r\n        await this.detectContours();\r\n        this.processing.emit(false);\r\n        resolve(false);\r\n      }, 15);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * read image from File object\r\n   */\r\n  private readImage(file: File) {\r\n    return new Promise(async (resolve, reject) => {\r\n      let imageSrc;\r\n      try {\r\n        imageSrc = await readFile();\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n      const img = new Image();\r\n      if (this.editedImage) {\r\n        console.log('clearing old edited image...');\r\n        this.editedImage.remove();\r\n      }\r\n      img.onload = async () => {\r\n        // set edited image canvas and dimensions\r\n        this.editedImage = <HTMLCanvasElement>document.createElement('canvas');\r\n        this.editedImage.width = img.width;\r\n        this.editedImage.height = img.height;\r\n        const ctx = this.editedImage.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        // resize image if larger than max image size\r\n        const width = img.width > img.height ? img.height : img.width;\r\n        if (width > this.options.maxImageDimensions.width) {\r\n          this.editedImage = await this.resize(this.editedImage);\r\n        }\r\n        this.imageDimensions.width = this.editedImage.width;\r\n        this.imageDimensions.height = this.editedImage.height;\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        resolve(true);\r\n      };\r\n      img.src = imageSrc;\r\n    });\r\n\r\n    /**\r\n     * read file from input field\r\n     */\r\n    function readFile() {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (err) => {\r\n          reject(err);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n  }\r\n\r\n  // ************************ //\r\n  // Image Processing Methods //\r\n  // ************************ //\r\n  /**\r\n   * rotate image 90 degrees\r\n   */\r\n  rotateImage(clockwise = true) {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        this.rotate(clockwise);\r\n\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve(true);\r\n        });\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  doubleRotate() {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        this.rotate(true);\r\n        this.rotate(false);\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve(true);\r\n        });\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  rotate(clockwise = true) {\r\n    const dst = cv.imread(this.editedImage);\r\n    // const dst = new cv.Mat();\r\n    cv.transpose(dst, dst);\r\n    if (clockwise) {\r\n      cv.flip(dst, dst, 1);\r\n    } else {\r\n      cv.flip(dst, dst, 0);\r\n    }\r\n\r\n    cv.imshow(this.editedImage, dst);\r\n    // src.delete();\r\n    dst.delete();\r\n    // save current preview dimensions and positions\r\n    const initialPreviewDimensions = {width: 0, height: 0};\r\n    Object.assign(initialPreviewDimensions, this.previewDimensions);\r\n    const initialPositions = Array.from(this.points);\r\n    // get new dimensions\r\n    // set new preview pane dimensions\r\n    this.setPreviewPaneDimensions(this.editedImage);\r\n    // get preview pane resize ratio\r\n    const previewResizeRatios = {\r\n      width: this.previewDimensions.width / initialPreviewDimensions.width,\r\n      height: this.previewDimensions.height / initialPreviewDimensions.height\r\n    };\r\n    // set new preview pane dimensions\r\n\r\n    if (clockwise) {\r\n      this.limitsService.rotateClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\r\n    } else {\r\n      this.limitsService.rotateAntiClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * detects the contours of the document and\r\n   **/\r\n  private detectContours(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        // load the image and compute the ratio of the old height to the new height, clone it, and resize it\r\n        // const processingResizeRatio = 0.5;\r\n        const src = cv.imread(this.editedImage);\r\n        const dst = cv.Mat.zeros(src.rows, src.cols, cv.CV_8UC3);\r\n        const ksize = new cv.Size(5, 5);\r\n        // convert the image to grayscale, blur it, and find edges in the image\r\n        cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);\r\n        cv.GaussianBlur(src, src, ksize, 0, 0, cv.BORDER_DEFAULT);\r\n        // cv.Canny(src, src, 75, 200);\r\n        // find contours\r\n\r\n        if (this.config.thresholdInfo.thresholdType === 'standard') {\r\n          cv.threshold(src, src, this.config.thresholdInfo.thresh, this.config.thresholdInfo.maxValue, cv.THRESH_BINARY);\r\n        } else if (this.config.thresholdInfo.thresholdType === 'adaptive_mean') {\r\n          cv.adaptiveThreshold(src, src, this.config.thresholdInfo.maxValue, cv.ADAPTIVE_THRESH_MEAN_C,\r\n            cv.THRESH_BINARY, this.config.thresholdInfo.blockSize, this.config.thresholdInfo.c);\r\n        } else if (this.config.thresholdInfo.thresholdType === 'adaptive_gaussian') {\r\n          cv.adaptiveThreshold(src, src, this.config.thresholdInfo.maxValue, cv.ADAPTIVE_THRESH_GAUSSIAN_C,\r\n            cv.THRESH_BINARY, this.config.thresholdInfo.blockSize, this.config.thresholdInfo.c);\r\n        }\r\n\r\n        const contours = new cv.MatVector();\r\n        const hierarchy = new cv.Mat();\r\n        cv.findContours(src, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\r\n        const cnt = contours.get(4);\r\n        if (!cnt) {\r\n          this.processing.emit(false);\r\n          return;\r\n        }\r\n        // console.log('----------UNIQUE RECTANGLES FROM ALL CONTOURS----------');\r\n        const rects = [];\r\n        for (let i = 0; i < contours.size(); i++) {\r\n          const cn = contours.get(i);\r\n          const r = cv.minAreaRect(cn);\r\n          let add = true;\r\n          if (r.size.height < 50 || r.size.width < 50\r\n            || r.angle === 90 || r.angle === 180 || r.angle === 0\r\n            || r.angle === -90 || r.angle === -180\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          for (let j = 0; j < rects.length; j++) {\r\n            if (\r\n              rects[j].angle === r.angle\r\n              && rects[j].center.x === r.center.x && rects[j].center.y === r.center.y\r\n              && rects[j].size.width === r.size.width && rects[j].size.height === r.size.height\r\n            ) {\r\n              add = false;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (add) {\r\n            rects.push(r);\r\n          } else {\r\n            try {\r\n              r.delete();\r\n            } catch (e) {\r\n            }\r\n          }\r\n        }\r\n\r\n        let rect2 = cv.minAreaRect(cnt);\r\n        for (let i = 0; i < rects.length; i++) {\r\n          if (((rects[i].size.width * rects[i].size.height) > (rect2.size.width * rect2.size.height)\r\n            && !(rects[i].angle === 90 || rects[i].angle === 180 || rects[i].angle === 0\r\n              || rects[i].angle === -90 || rects[i].angle === -180) && ((rects[i].angle > 85 || rects[i].angle < 5)))\r\n          ) {\r\n            rect2 = rects[i];\r\n          }\r\n        }\r\n        const vertices = cv.RotatedRect.points(rect2);\r\n        for (let i = 0; i < 4; i++) {\r\n          vertices[i].x = vertices[i].x * this.imageResizeRatio;\r\n          vertices[i].y = vertices[i].y * this.imageResizeRatio;\r\n        }\r\n\r\n        const rect = cv.boundingRect(src);\r\n\r\n        src.delete();\r\n        hierarchy.delete();\r\n        contours.delete();\r\n        // transform the rectangle into a set of points\r\n        Object.keys(rect).forEach(key => {\r\n          rect[key] = rect[key] * this.imageResizeRatio;\r\n        });\r\n\r\n        let contourCoordinates: PositionChangeData[];\r\n\r\n        const firstRoles: RolesArray = [this.isTop(vertices[0], [vertices[1], vertices[2], vertices[3]]) ? 'top' : 'bottom'];\r\n        const secondRoles: RolesArray = [this.isTop(vertices[1], [vertices[0], vertices[2], vertices[3]]) ? 'top' : 'bottom'];\r\n        const thirdRoles: RolesArray = [this.isTop(vertices[2], [vertices[0], vertices[1], vertices[3]]) ? 'top' : 'bottom'];\r\n        const fourthRoles: RolesArray = [this.isTop(vertices[3], [vertices[0], vertices[2], vertices[1]]) ? 'top' : 'bottom'];\r\n\r\n        const roles = [firstRoles, secondRoles, thirdRoles, fourthRoles];\r\n        const ts = [];\r\n        const bs = [];\r\n\r\n        for (let i = 0; i < roles.length; i++) {\r\n          if (roles[i][0] === 'top') {\r\n            ts.push(i);\r\n          } else {\r\n            bs.push(i);\r\n          }\r\n        }\r\n\r\n        dst.delete();\r\n        cnt.delete();\r\n\r\n        try {\r\n          if (this.isLeft(vertices[ts[0]], vertices[ts[1]])) {\r\n            roles[ts[0]].push('left');\r\n            roles[ts[1]].push('right');\r\n          } else {\r\n            roles[ts[1]].push('right');\r\n            roles[ts[0]].push('left');\r\n          }\r\n\r\n          if (this.isLeft(vertices[bs[0]], vertices[bs[1]])) {\r\n            roles[bs[0]].push('left');\r\n            roles[bs[1]].push('right');\r\n          } else {\r\n            roles[bs[1]].push('left');\r\n            roles[bs[0]].push('right');\r\n          }\r\n        } catch (e) {\r\n          this.processing.emit(false);\r\n          return;\r\n\r\n        }\r\n\r\n        if (this.config.useRotatedRectangle\r\n          && this.pointsAreNotTheSame(vertices)\r\n        ) {\r\n          contourCoordinates = [\r\n            new PositionChangeData({x: vertices[0].x, y: vertices[0].y}, firstRoles),\r\n            new PositionChangeData({x: vertices[1].x, y: vertices[1].y}, secondRoles),\r\n            new PositionChangeData({x: vertices[2].x, y: vertices[2].y}, thirdRoles),\r\n            new PositionChangeData({x: vertices[3].x, y: vertices[3].y}, fourthRoles),\r\n          ];\r\n        } else {\r\n          contourCoordinates = [\r\n            new PositionChangeData({x: rect.x, y: rect.y}, ['left', 'top']),\r\n            new PositionChangeData({x: rect.x + rect.width, y: rect.y}, ['right', 'top']),\r\n            new PositionChangeData({x: rect.x + rect.width, y: rect.y + rect.height}, ['right', 'bottom']),\r\n            new PositionChangeData({x: rect.x, y: rect.y + rect.height}, ['left', 'bottom']),\r\n          ];\r\n        }\r\n\r\n\r\n        this.limitsService.repositionPoints(contourCoordinates);\r\n        // this.processing.emit(false);\r\n        resolve();\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  isTop(coordinate, otherVertices): boolean {\r\n\r\n    let count = 0;\r\n    for (let i = 0; i < otherVertices.length; i++) {\r\n      if (coordinate.y < otherVertices[i].y) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return count >= 2;\r\n\r\n  }\r\n\r\n  isLeft(coordinate, secondCoordinate): boolean {\r\n    return coordinate.x < secondCoordinate.x;\r\n  }\r\n\r\n  private pointsAreNotTheSame(vertices: any): boolean {\r\n    return !(vertices[0].x === vertices[1].x && vertices[1].x === vertices[2].x && vertices[2].x === vertices[3].x &&\r\n      vertices[0].y === vertices[1].y && vertices[1].y === vertices[2].y && vertices[2].y === vertices[3].y);\r\n  }\r\n\r\n  /**\r\n   * apply perspective transform\r\n   */\r\n  private transform(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const dst = cv.imread(this.editedImage);\r\n\r\n        // create source coordinates matrix\r\n        const sourceCoordinates = [\r\n          this.getPoint(['top', 'left']),\r\n          this.getPoint(['top', 'right']),\r\n          this.getPoint(['bottom', 'right']),\r\n          this.getPoint(['bottom', 'left'])\r\n        ].map(point => {\r\n          return [point.x / this.imageResizeRatio, point.y / this.imageResizeRatio];\r\n        });\r\n\r\n        // get max width\r\n        const bottomWidth = this.getPoint(['bottom', 'right']).x - this.getPoint(['bottom', 'left']).x;\r\n        const topWidth = this.getPoint(['top', 'right']).x - this.getPoint(['top', 'left']).x;\r\n        const maxWidth = Math.max(bottomWidth, topWidth) / this.imageResizeRatio;\r\n        // get max height\r\n        const leftHeight = this.getPoint(['bottom', 'left']).y - this.getPoint(['top', 'left']).y;\r\n        const rightHeight = this.getPoint(['bottom', 'right']).y - this.getPoint(['top', 'right']).y;\r\n        const maxHeight = Math.max(leftHeight, rightHeight) / this.imageResizeRatio;\r\n        // create dest coordinates matrix\r\n        const destCoordinates = [\r\n          [0, 0],\r\n          [maxWidth - 1, 0],\r\n          [maxWidth - 1, maxHeight - 1],\r\n          [0, maxHeight - 1]\r\n        ];\r\n\r\n        // convert to open cv matrix objects\r\n        const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\r\n        const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\r\n        const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\r\n        // set new image size\r\n        const dsize = new cv.Size(maxWidth, maxHeight);\r\n        // perform warp\r\n        cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_CUBIC, cv.BORDER_CONSTANT, new cv.Scalar());\r\n        cv.imshow(this.editedImage, dst);\r\n\r\n        dst.delete();\r\n        Ms.delete();\r\n        Md.delete();\r\n        transformMatrix.delete();\r\n\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve();\r\n        });\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * applies the selected filter to the image\r\n   * @param preview - when true, will not apply the filter to the edited image but only display a preview.\r\n   * when false, will apply to editedImage\r\n   */\r\n  private applyFilter(preview: boolean): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.processing.emit(true);\r\n      // default options\r\n      const options = {\r\n        blur: false,\r\n        th: true,\r\n        thMode: cv.ADAPTIVE_THRESH_MEAN_C,\r\n        thMeanCorrection: 10,\r\n        thBlockSize: 25,\r\n        thMax: 255,\r\n        grayScale: true,\r\n      };\r\n      const dst = cv.imread(this.editedImage);\r\n\r\n      if (!this.config.filterEnable) {\r\n        this.selectedFilter = 'original';\r\n      }\r\n\r\n      switch (this.selectedFilter) {\r\n        case 'original':\r\n          options.th = false;\r\n          options.grayScale = false;\r\n          options.blur = false;\r\n          break;\r\n        case 'magic_color':\r\n          options.grayScale = false;\r\n          break;\r\n        case 'bw2':\r\n          options.thMode = cv.ADAPTIVE_THRESH_GAUSSIAN_C;\r\n          options.thMeanCorrection = 15;\r\n          options.thBlockSize = 15;\r\n          break;\r\n        case 'bw3':\r\n          options.blur = true;\r\n          options.thMeanCorrection = 15;\r\n          break;\r\n      }\r\n\r\n      setTimeout(async () => {\r\n        if (options.grayScale) {\r\n          cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\r\n        }\r\n        if (options.blur) {\r\n          const ksize = new cv.Size(5, 5);\r\n          cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\r\n        }\r\n        if (options.th) {\r\n          if (options.grayScale) {\r\n            cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\r\n          } else {\r\n            dst.convertTo(dst, -1, 1, 60);\r\n            cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\r\n          }\r\n        }\r\n        if (!preview) {\r\n          cv.imshow(this.editedImage, dst);\r\n        }\r\n        await this.showPreview(dst);\r\n        this.processing.emit(false);\r\n        resolve();\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * resize an image to fit constraints set in options.maxImageDimensions\r\n   */\r\n  private resize(image: HTMLCanvasElement): Promise<HTMLCanvasElement> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const src = cv.imread(image);\r\n        const currentDimensions = {\r\n          width: src.size().width,\r\n          height: src.size().height\r\n        };\r\n        const resizeDimensions = {\r\n          width: 0,\r\n          height: 0\r\n        };\r\n        if (currentDimensions.width > this.options.maxImageDimensions.width) {\r\n          resizeDimensions.width = this.options.maxImageDimensions.width;\r\n          resizeDimensions.height = this.options.maxImageDimensions.width / currentDimensions.width * currentDimensions.height;\r\n          if (resizeDimensions.height > this.options.maxImageDimensions.height) {\r\n            resizeDimensions.height = this.options.maxImageDimensions.height;\r\n            resizeDimensions.width = this.options.maxImageDimensions.height / currentDimensions.height * currentDimensions.width;\r\n          }\r\n          const dsize = new cv.Size(Math.floor(resizeDimensions.width), Math.floor(resizeDimensions.height));\r\n          cv.resize(src, src, dsize, 0, 0, cv.INTER_AREA);\r\n          const resizeResult = <HTMLCanvasElement>document.createElement('canvas');\r\n          cv.imshow(resizeResult, src);\r\n          src.delete();\r\n          this.processing.emit(false);\r\n          resolve(resizeResult);\r\n        } else {\r\n          this.processing.emit(false);\r\n          resolve(image);\r\n        }\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * display a preview of the image on the preview canvas\r\n   */\r\n  private showPreview(image?: any) {\r\n    return new Promise((resolve, reject) => {\r\n      let src;\r\n      if (image) {\r\n        src = image;\r\n      } else {\r\n        src = cv.imread(this.editedImage);\r\n      }\r\n      const dst = new cv.Mat();\r\n      const dsize = new cv.Size(0, 0);\r\n      cv.resize(src, dst, dsize, this.imageResizeRatio, this.imageResizeRatio, cv.INTER_AREA);\r\n      cv.imshow(this.previewCanvas.nativeElement, dst);\r\n      src.delete();\r\n      dst.delete();\r\n      try {\r\n        if (image) {\r\n          image.delete();\r\n        }\r\n      } catch (e) {\r\n      }\r\n      resolve(image);\r\n    });\r\n  }\r\n\r\n  // *************** //\r\n  // Utility Methods //\r\n  // *************** //\r\n  /**\r\n   * set preview canvas dimensions according to the canvas element of the original image\r\n   */\r\n  private setPreviewPaneDimensions(img: HTMLCanvasElement) {\r\n    // set preview pane dimensions\r\n    this.previewDimensions = this.calculateDimensions(img.width, img.height);\r\n    this.previewCanvas.nativeElement.width = this.previewDimensions.width;\r\n    this.previewCanvas.nativeElement.height = this.previewDimensions.height;\r\n    this.imageResizeRatio = this.previewDimensions.width / img.width;\r\n    this.imageDivStyle = {\r\n      width: this.previewDimensions.width + this.options.cropToolDimensions.width + 'px',\r\n      height: this.previewDimensions.height + this.options.cropToolDimensions.height + 'px',\r\n      'margin-left': this.sanitizer.bypassSecurityTrustStyle(`calc((100% - ${this.previewDimensions.width + 10}px) / 2 + ${this.options.cropToolDimensions.width / 2}px)`),\r\n      'margin-right': this.sanitizer.bypassSecurityTrustStyle(`calc((100% - ${this.previewDimensions.width + 10}px) / 2 - ${this.options.cropToolDimensions.width / 2}px)`),\r\n    };\r\n    this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\r\n  }\r\n\r\n  /**\r\n   * calculate dimensions of the preview canvas\r\n   */\r\n  private calculateDimensions(width: number, height: number): { width: number; height: number; ratio: number } {\r\n    const ratio = width / height;\r\n\r\n    // const maxWidth = this.screenDimensions.width > this.maxPreviewWidth ?\r\n    //   this.maxPreviewWidth : this.screenDimensions.width - 40;\r\n    // const maxHeight = this.screenDimensions.height > this.maxPreviewHeight ? this.maxPreviewHeight : this.screenDimensions.height - 240;\r\n    const maxWidth = this.maxPreviewWidth;\r\n    const maxHeight = this.maxPreviewHeight;\r\n    const calculated = {\r\n      width: maxWidth,\r\n      height: Math.round(maxWidth / ratio),\r\n      ratio: ratio\r\n    };\r\n\r\n    if (calculated.height > maxHeight) {\r\n      calculated.height = maxHeight;\r\n      calculated.width = Math.round(maxHeight * ratio);\r\n    }\r\n    return calculated;\r\n  }\r\n\r\n  /**\r\n   * returns a point by it's roles\r\n   * @param roles - an array of roles by which the point will be fetched\r\n   */\r\n  private getPoint(roles: RolesArray) {\r\n    return this.points.find(point => {\r\n      return this.limitsService.compareArray(point.roles, roles);\r\n    });\r\n  }\r\n\r\n  getStoyle(): { [p: string]: string | number } {\r\n    return this.editorStyle;\r\n  }\r\n}\r\n\r\n/**\r\n * a class for generating configuration objects for the editor\r\n */\r\nclass ImageEditorConfig implements DocScannerConfig {\r\n  /**\r\n   * max dimensions of oputput image. if set to zero\r\n   */\r\n  maxImageDimensions: ImageDimensions = {\r\n    width: 30000,\r\n    height: 30000\r\n  };\r\n  /**\r\n   * background color of the main editor div\r\n   */\r\n  editorBackgroundColor = '#fefefe';\r\n  /**\r\n   * css properties for the main editor div\r\n   */\r\n  editorDimensions: { width: string; height: string; } = {\r\n    width: '100vw',\r\n    height: '100vh'\r\n  };\r\n  /**\r\n   * css that will be added to the main div of the editor component\r\n   */\r\n  extraCss: { [key: string]: string | number } = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0\r\n  };\r\n\r\n  /**\r\n   * material design theme color name\r\n   */\r\n  buttonThemeColor: 'primary' | 'warn' | 'accent' = 'accent';\r\n  /**\r\n   * icon for the button that completes the editing and emits the edited image\r\n   */\r\n  exportImageIcon = 'cloud_upload';\r\n  /**\r\n   * color of the crop tool\r\n   */\r\n  cropToolColor = '#FF3333';\r\n  /**\r\n   * shape of the crop tool, can be either a rectangle or a circle\r\n   */\r\n  cropToolShape: PointShape = 'circle';\r\n  /**\r\n   * dimensions of the crop tool\r\n   */\r\n  cropToolDimensions: ImageDimensions = {\r\n    width: 10,\r\n    height: 10\r\n  };\r\n  /**\r\n   * aggregation of the properties regarding point attributes generated by the class constructor\r\n   */\r\n  pointOptions: PointOptions;\r\n  /**\r\n   * aggregation of the properties regarding the editor style generated by the class constructor\r\n   */\r\n  editorStyle?: { [key: string]: string | number };\r\n  /**\r\n   * crop tool outline width\r\n   */\r\n  cropToolLineWeight = 3;\r\n  /**\r\n   * maximum size of the preview pane\r\n   */\r\n  maxPreviewWidth = 800;\r\n\r\n  /**\r\n   * maximum size of the preview pane\r\n   */\r\n  maxPreviewHeight = 800;\r\n\r\n  constructor(options: DocScannerConfig) {\r\n    if (options) {\r\n      Object.keys(options).forEach(key => {\r\n        this[key] = options[key];\r\n      });\r\n    }\r\n\r\n    this.editorStyle = {'background-color': this.editorBackgroundColor};\r\n    Object.assign(this.editorStyle, this.editorDimensions);\r\n    Object.assign(this.editorStyle, this.extraCss);\r\n\r\n    this.pointOptions = {\r\n      shape: this.cropToolShape,\r\n      color: this.cropToolColor,\r\n      width: 0,\r\n      height: 0\r\n    };\r\n    Object.assign(this.pointOptions, this.cropToolDimensions);\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {NgxDraggablePointComponent} from './components/draggable-point/ngx-draggable-point.component';\r\nimport {NgxFilterMenuComponent} from './components/filter-menu/ngx-filter-menu.component';\r\nimport {NgxShapeOutlineComponent} from './components/shape-outline/ngx-shape-outline.component';\r\nimport {NgxDocScannerComponent} from './components/image-editor/ngx-doc-scanner.component';\r\nimport {LimitsService} from './services/limits.service';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {AngularDraggableModule} from 'angular2-draggable';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OpenCVConfig} from './PublicModels';\r\nimport {NgxOpenCVModule} from 'ngx-opencv';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport {NgxOpenCVService, OpenCvConfigToken} from 'ngx-opencv';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {FormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxDraggablePointComponent,\r\n    NgxFilterMenuComponent,\r\n    NgxShapeOutlineComponent,\r\n    NgxDocScannerComponent,\r\n  ],\r\n  imports: [\r\n    FlexLayoutModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatBottomSheetModule,\r\n    MatListModule,\r\n    AngularDraggableModule,\r\n    CommonModule,\r\n    NgxOpenCVModule,\r\n    MatSliderModule,\r\n    FormsModule,\r\n  ],\r\n  exports: [\r\n    FlexLayoutModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatBottomSheetModule,\r\n    MatListModule,\r\n    AngularDraggableModule,\r\n    NgxDocScannerComponent,\r\n  ],\r\n  entryComponents: [\r\n    NgxFilterMenuComponent,\r\n  ],\r\n  providers: [\r\n    NgxOpenCVService,\r\n    LimitsService,\r\n  ]\r\n})\r\nexport class NgxDocumentScannerModule {\r\n  static forRoot(config: OpenCVConfig): ModuleWithProviders<NgxDocumentScannerModule> {\r\n    return {\r\n      ngModule: NgxDocumentScannerModule,\r\n      providers: [\r\n        { provide: OpenCvConfigToken, useValue: config },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ngx-document-scanner\r\n */\r\n\r\nexport * from './lib/ngx-document-scanner.module';\r\nexport * from './lib/components/image-editor/ngx-doc-scanner.component';\r\nexport * from './lib/PublicModels';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.LimitsService","_c1","i1","i2.LimitsService","i3","i4"],"mappings":"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"}