{"version":3,"file":"ngx-document-scanner.js","sources":["ng://ngx-document-scanner/lib/services/limits.service.ts","ng://ngx-document-scanner/lib/components/draggable-point/ngx-draggable-point.component.ts","ng://ngx-document-scanner/lib/components/filter-menu/ngx-filter-menu.component.ts","ng://ngx-document-scanner/lib/components/shape-outline/ngx-shape-outline.component.ts","ng://ngx-document-scanner/lib/components/image-editor/ngx-doc-scanner.component.ts","ng://ngx-document-scanner/lib/ngx-document-scanner.module.ts","ng://ngx-document-scanner/lib/PublicModels.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {ImageDimensions} from '../PublicModels';\r\nimport {LimitException, XYPosition} from '../PrivateModels';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LimitsService {\r\n\r\n\r\n  private limitDirections: RolesArray = ['left', 'right', 'top', 'bottom'];\r\n  /**\r\n   * stores the crop limits limits\r\n   */\r\n  private _limits = {\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n    left: 0\r\n  };\r\n  /**\r\n   * stores the array of the draggable points displayed on the crop area\r\n   */\r\n  private _points: Array<PointPositionChange> = [];\r\n  /**\r\n   * stores the pane dimensions\r\n   */\r\n  private _paneDimensions: ImageDimensions;\r\n\r\n  // *********** //\r\n  // Observables //\r\n  // *********** //\r\n  public positions: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>(Array.from(this._points));\r\n  public repositionEvent: BehaviorSubject<Array<PointPositionChange>> = new BehaviorSubject<Array<PointPositionChange>>([]);\r\n  public limits: BehaviorSubject<AreaLimits> = new BehaviorSubject<AreaLimits>(this._limits);\r\n  public paneDimensions: BehaviorSubject<ImageDimensions> = new BehaviorSubject({width: 0, height: 0});\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * set privew pane dimensions\r\n   */\r\n  public setPaneDimensions(dimensions: ImageDimensions) {\r\n    return new Promise((resolve, reject) => {\r\n      this._paneDimensions = dimensions;\r\n      this.paneDimensions.next(dimensions);\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * repositions points externally\r\n   */\r\n  public repositionPoints(positions) {\r\n    this._points = positions;\r\n    positions.forEach(position => {\r\n      this.positionChange(position);\r\n    });\r\n    this.repositionEvent.next(positions);\r\n  }\r\n\r\n  /**\r\n   * updates limits and point positions and calls next on the observables\r\n   * @param positionChangeData - position change event data\r\n   */\r\n  public positionChange(positionChangeData: PointPositionChange) {\r\n    // update positions according to current position change\r\n    this.updatePosition(positionChangeData);\r\n\r\n    // for each direction:\r\n    // 1. filter the _points that have a role as the direction's limit\r\n    // 2. for top and left find max x | y values, and min for right and bottom\r\n    this.limitDirections.forEach(direction => {\r\n      const relevantPoints = this._points.filter(point => {\r\n        return point.roles.includes(direction);\r\n      })\r\n        .map((point: PointPositionChange) => {\r\n          return point[this.getDirectionAxis(direction)];\r\n        });\r\n      let limit;\r\n      if (direction === 'top' || direction === 'left') {\r\n        limit = Math.max(...relevantPoints);\r\n      }\r\n      if (direction === 'right' || direction === 'bottom') {\r\n        limit = Math.min(...relevantPoints);\r\n      }\r\n      this._limits[direction] = limit;\r\n    });\r\n\r\n    this.limits.next(this._limits);\r\n    this.positions.next(Array.from(this._points));\r\n  }\r\n\r\n  /**\r\n   * updates the position of the point\r\n   * @param positionChange - position change event data\r\n   */\r\n  public updatePosition(positionChange: PointPositionChange) {\r\n    // finds the current position of the point by it's roles, than splices it for the new position or pushes it if it's not yet in the array\r\n    const index = this._points.findIndex(point => {\r\n      return this.compareArray(positionChange.roles, point.roles);\r\n    });\r\n    if (index === -1) {\r\n      this._points.push(positionChange);\r\n    } else {\r\n      this._points.splice(index, 1, positionChange);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * check if a position change event exceeds the limits\r\n   * @param positionChange - position change event data\r\n   * @returns LimitException0\r\n   */\r\n  public exceedsLimit(positionChange: PointPositionChange): LimitException {\r\n    const pointLimits = this.limitDirections.filter(direction => {\r\n      return !positionChange.roles.includes(direction);\r\n    });\r\n\r\n    const limitException: LimitException = {\r\n      exceeds: false,\r\n      resetCoefficients: {\r\n        x: 0,\r\n        y: 0\r\n      },\r\n      resetCoordinates: {\r\n        x: positionChange.x,\r\n        y: positionChange.y\r\n      }\r\n    };\r\n\r\n    // limit directions are the opposite sides of the point's roles\r\n    pointLimits.forEach(direction => {\r\n      const directionAxis = this.getDirectionAxis(direction);\r\n      if (direction === 'top' || direction === 'left') {\r\n        if (positionChange[directionAxis] < this._limits[direction]) {\r\n          limitException.resetCoefficients[directionAxis] = 1;\r\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\r\n        }\r\n      } else if (direction === 'right' || direction === 'bottom') {\r\n        if (positionChange[directionAxis] > this._limits[direction]) {\r\n          limitException.resetCoefficients[directionAxis] = -1;\r\n          limitException.resetCoordinates[directionAxis] = this._limits[direction];\r\n        }\r\n      }\r\n    });\r\n\r\n    if (limitException.resetCoefficients.x !== 0 || limitException.resetCoefficients.y !== 0) {\r\n      limitException.exceeds = true;\r\n    }\r\n\r\n    return limitException;\r\n  }\r\n\r\n  /**\r\n   * rotate crop tool points clockwise\r\n   * @param resizeRatios - ratio between the new dimensions and the previous\r\n   * @param initialPreviewDimensions - preview pane dimensions before rotation\r\n   * @param initialPositions - current positions before rotation\r\n   */\r\n  public rotateClockwise(resizeRatios, initialPreviewDimensions, initialPositions: Array<PointPositionChange>) {\r\n    // convert positions to ratio between position to initial pane dimension\r\n    initialPositions = initialPositions.map(point => {\r\n      return new PositionChangeData({\r\n        x: point.x / initialPreviewDimensions.width,\r\n        y: point.y / initialPreviewDimensions.height,\r\n      }, point.roles);\r\n    });\r\n    this.repositionPoints(initialPositions.map(point => {\r\n      return this.rotateCornerClockwise(point);\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * returns the corner positions after a 90 degrees clockwise rotation\r\n   */\r\n  private rotateCornerClockwise(corner: PointPositionChange): PointPositionChange {\r\n    const rotated: PointPositionChange = {\r\n      x: this._paneDimensions.width * (1 - corner.y),\r\n      y: this._paneDimensions.height * corner.x,\r\n      roles: []\r\n    };\r\n    // rotates corner according to order\r\n    const order: Array<RolesArray> = [\r\n      ['bottom', 'left'],\r\n      ['top', 'left'],\r\n      ['top', 'right'],\r\n      ['bottom', 'right'],\r\n      ['bottom', 'left']\r\n    ];\r\n    rotated.roles = order[order.findIndex(roles => {\r\n      return this.compareArray(roles, corner.roles);\r\n    }) + 1];\r\n    return rotated;\r\n  }\r\n\r\n  /**\r\n   * checks if two array contain the same values\r\n   * @param array1 - array 1\r\n   * @param array2 - array 2\r\n   * @returns boolean\r\n   */\r\n  public compareArray(array1: Array<string>, array2: Array<string>): boolean {\r\n    return array1.every((element) => {\r\n      return array2.includes(element);\r\n    }) && array1.length === array2.length;\r\n  }\r\n\r\n  private getDirectionAxis(direction) {\r\n    return {\r\n      left: 'x',\r\n      right: 'x',\r\n      top: 'y',\r\n      bottom: 'y'\r\n    }[direction];\r\n  }\r\n}\r\n\r\n\r\nexport interface PointPositionChange {\r\n  x: number;\r\n  y: number;\r\n  roles: RolesArray;\r\n}\r\n\r\nexport interface AreaLimits {\r\n  top: number;\r\n  bottom: number;\r\n  right: number;\r\n  left: number;\r\n}\r\n\r\nexport type RolesArray = Array<Direction>;\r\n\r\nexport class PositionChangeData implements PointPositionChange {\r\n  x: number;\r\n  y: number;\r\n  roles: RolesArray;\r\n\r\n  constructor(position: XYPosition, roles: RolesArray) {\r\n    this.x = position.x;\r\n    this.y = position.y;\r\n    this.roles = roles;\r\n  }\r\n}\r\n\r\nexport type Direction = 'left' | 'right' | 'top' | 'bottom';\r\n","import {AfterViewInit, Component, Input} from '@angular/core';\r\nimport {LimitsService, PointPositionChange, PositionChangeData} from '../../services/limits.service';\r\nimport {ImageDimensions} from '../../PublicModels';\r\nimport {LimitException, XYPosition} from '../../PrivateModels';\r\n\r\n@Component({\r\n  selector: 'ngx-draggable-point',\r\n  templateUrl: './ngx-draggable-point.component.html',\r\n})\r\nexport class NgxDraggablePointComponent implements AfterViewInit {\r\n  @Input() width = 10;\r\n  @Input() height = 10;\r\n  @Input() color = '#3cabe2';\r\n  @Input() shape: 'rect' | 'circle' = 'rect';\r\n  @Input() pointOptions: 'rect' | 'circle' = 'rect';\r\n  @Input() limitRoles: Array<'left'|'right'|'top'|'bottom'>;\r\n  @Input() startPosition: XYPosition;\r\n  @Input() container: HTMLElement;\r\n  @Input() private _currentPosition: XYPosition;\r\n  position: XYPosition = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  private _paneDimensions: ImageDimensions;\r\n  resetPosition: XYPosition;\r\n\r\n  constructor(private limitsService: LimitsService) {}\r\n\r\n  ngAfterViewInit() {\r\n    Object.keys(this.pointOptions).forEach(key => {\r\n      this[key] = this.pointOptions[key];\r\n    });\r\n    // subscribe to pane dimensions changes\r\n    this.limitsService.paneDimensions.subscribe(dimensions => {\r\n      if (dimensions.width > 0 && dimensions.width > 0) {\r\n        this._paneDimensions = {\r\n          width: dimensions.width,\r\n          height: dimensions.height\r\n        };\r\n        this.position = this.getInitialPosition(dimensions);\r\n        this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\r\n      }\r\n    });\r\n    // subscribe to external reposition events\r\n    this.limitsService.repositionEvent.subscribe(positions => {\r\n      if (positions.length > 0) {\r\n        this.externalReposition(positions);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns a css style object for the point\r\n   */\r\n  pointStyle() {\r\n    return {\r\n      width: this.width + 'px',\r\n      height: this.height + 'px',\r\n      'background-color': this.color,\r\n      'border-radius': this.shape === 'circle' ? '100%' : 0,\r\n      position: 'absolute'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * registers a position change on the limits service, and adjusts position if necessary\r\n   * @param position - the current position of the point\r\n   */\r\n  positionChange(position: XYPosition) {\r\n    const positionChangeData = new PositionChangeData(position, this.limitRoles);\r\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\r\n    if (limitException.exceeds) {\r\n      // if exceeds limits, reposition\r\n      this.resetPosition = limitException.resetCoordinates;\r\n    } else {\r\n      this.limitsService.positionChange(positionChangeData);\r\n      this._currentPosition = position;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * adjusts the position of the point after a limit exception\r\n   */\r\n  private adjustPosition(limitException: LimitException) {\r\n    const newPosition = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    Object.keys(this.startPosition).forEach(axis => {\r\n      newPosition[axis] = limitException.resetCoordinates[axis] + limitException.resetCoefficients[axis];\r\n    });\r\n    this.position = newPosition;\r\n    this.limitsService.positionChange(new PositionChangeData(this.position, this.limitRoles));\r\n  }\r\n\r\n  /**\r\n   * called on movement end, checks if last position exceeded the limits ad adjusts\r\n   */\r\n  movementEnd(position: XYPosition) {\r\n    let positionChangeData = new PositionChangeData(position, this.limitRoles);\r\n    const limitException = this.limitsService.exceedsLimit(positionChangeData);\r\n    if (limitException.exceeds) {\r\n      this.resetPosition = limitException.resetCoordinates;\r\n      if (limitException.exceeds) {\r\n        this.adjustPosition(limitException);\r\n        positionChangeData = new PositionChangeData(this.position, this.limitRoles);\r\n        this.limitsService.updatePosition(positionChangeData);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * calculates the initial positions of the point by it's roles\r\n   * @param dimensions - dimensions of the pane in which the point is located\r\n   */\r\n  private getInitialPosition(dimensions: ImageDimensions) {\r\n    return {\r\n      x: this.limitRoles.includes('left') ? 0 : dimensions.width - this.width / 2,\r\n      y: this.limitRoles.includes('top') ? 0 : dimensions.height - this.height / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * repositions the point after an external reposition event\r\n   * @param positions - an array of all points on the pane\r\n   */\r\n  private externalReposition(positions: Array<PointPositionChange>) {\r\n    positions.forEach(position => {\r\n      if (this.limitsService.compareArray(this.limitRoles, position.roles)) {\r\n        position = this.enforcePaneLimits(position);\r\n        this.position = {\r\n          x: position.x,\r\n          y: position.y\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns a new point position if the movement exceeded the pane limit\r\n   */\r\n  private enforcePaneLimits(position: PointPositionChange): PointPositionChange {\r\n    if (this._paneDimensions.width === 0 || this._paneDimensions.height === 0) {\r\n      return position;\r\n    } else {\r\n      if (position.x > this._paneDimensions.width) { position.x = this._paneDimensions.width; }\r\n      if (position.x < 0) { position.x = 1; }\r\n      if (position.y > this._paneDimensions.height) { position.y = this._paneDimensions.height; }\r\n      if (position.y < 0) { position.y = 1; }\r\n    }\r\n    return position;\r\n  }\r\n}\r\n\r\n","import {Component, EventEmitter, Inject, Output} from '@angular/core';\r\nimport {EditorActionButton} from '../../PrivateModels';\r\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef} from '@angular/material/bottom-sheet';\r\n\r\n@Component({\r\n  selector: 'ngx-filter-menu',\r\n  templateUrl: './ngx-filter-menu.component.html',\r\n})\r\nexport class NgxFilterMenuComponent {\r\n  filterOptions: Array<EditorActionButton> = [\r\n    {\r\n      name: 'default',\r\n      icon: 'filter_b_and_w',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W'\r\n    },\r\n    {\r\n      name: 'bw2',\r\n      icon: 'filter_b_and_w',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W 2'\r\n    },\r\n    {\r\n      name: 'bw3',\r\n      icon: 'blur_on',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'B&W 3'\r\n    },\r\n    {\r\n      name: 'magic_color',\r\n      icon: 'filter_vintage',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'Magic Color'\r\n    },\r\n    {\r\n      name: 'original',\r\n      icon: 'crop_original',\r\n      action: (filter) => {\r\n        this.filterSelected.emit(filter);\r\n      },\r\n      text: 'Original'\r\n    },\r\n  ];\r\n  @Output() filterSelected: EventEmitter<string> = new EventEmitter();\r\n  selectOption(optionName) {\r\n    this.data.filter = optionName;\r\n    this.bottomSheetRef.dismiss();\r\n  }\r\n\r\n  constructor(private bottomSheetRef: MatBottomSheetRef<NgxFilterMenuComponent>,\r\n              @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\r\n              ) {}\r\n\r\n}\r\n","import {AfterViewInit, Component, Input, ViewChild} from '@angular/core';\r\nimport {LimitsService, PointPositionChange} from '../../services/limits.service';\r\nimport {ImageDimensions} from '../../PublicModels';\r\n\r\n@Component({\r\n  selector: 'ngx-shape-outine',\r\n  templateUrl: './ngx-shape-outline.component.html',\r\n})\r\nexport class NgxShapeOutlineComponent implements AfterViewInit {\r\n\r\n  @Input() color = '#3cabe2';\r\n  @Input() weight: number;\r\n  @Input() dimensions: ImageDimensions;\r\n  @ViewChild('outline') canvas;\r\n\r\n  private _points: Array<PointPositionChange>;\r\n  private _sortedPoints: Array<PointPositionChange>;\r\n  constructor(private limitsService: LimitsService) {}\r\n\r\n  ngAfterViewInit() {\r\n    // init drawing canvas dimensions\r\n    this.canvas.nativeElement.width = this.dimensions.width;\r\n    this.canvas.nativeElement.height = this.dimensions.height;\r\n    this.limitsService.positions.subscribe(positions => {\r\n      if (positions.length === 4) {\r\n        this._points = positions;\r\n        this.sortPoints();\r\n        this.clearCanvas();\r\n        this.drawShape();\r\n      }\r\n    });\r\n    // subscribe to changes in the pane's dimensions\r\n    this.limitsService.paneDimensions.subscribe(dimensions => {\r\n      this.clearCanvas();\r\n      this.canvas.nativeElement.width = dimensions.width;\r\n      this.canvas.nativeElement.height = dimensions.height;\r\n    });\r\n    // subscribe to reposition events\r\n    this.limitsService.repositionEvent.subscribe( positions => {\r\n      if (positions.length === 4) {\r\n        setTimeout( () => {\r\n          this.clearCanvas();\r\n          this.sortPoints();\r\n          this.drawShape();\r\n        }, 10);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * clears the shape canvas\r\n   */\r\n  private clearCanvas() {\r\n    const canvas = this.canvas.nativeElement;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\r\n  }\r\n\r\n  /**\r\n   * sorts the array of points according to their clockwise alignment\r\n   */\r\n  private sortPoints() {\r\n    const _points = Array.from(this._points);\r\n    const sortedPoints = [];\r\n\r\n    const sortOrder = {\r\n      vertical: ['top', 'top', 'bottom', 'bottom'],\r\n      horizontal: ['left', 'right', 'right', 'left']\r\n    };\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      const roles = Array.from([sortOrder.vertical[i], sortOrder.horizontal[i]]);\r\n      sortedPoints.push(_points.filter((point) => {\r\n        return this.limitsService.compareArray(point.roles, roles);\r\n      })[0]);\r\n\r\n    }\r\n    this._sortedPoints = sortedPoints;\r\n  }\r\n\r\n  /**\r\n   * draws a line between the points according to their order\r\n   */\r\n  private drawShape() {\r\n    const canvas = this.canvas.nativeElement;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.lineWidth = this.weight;\r\n    ctx.strokeStyle = this.color;\r\n    ctx.beginPath();\r\n    this._sortedPoints.forEach((point, index) => {\r\n      if (index === 0) {\r\n        ctx.moveTo(point.x, point.y);\r\n      }\r\n      if (index !== this._sortedPoints.length - 1) {\r\n        const nextPoint = this._sortedPoints[index + 1];\r\n        ctx.lineTo(nextPoint.x, nextPoint.y);\r\n      } else {\r\n        ctx.closePath();\r\n      }\r\n    });\r\n    ctx.stroke();\r\n  }\r\n}\r\n\r\n\r\n","import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\r\nimport {LimitsService, PointPositionChange, PositionChangeData, RolesArray} from '../../services/limits.service';\r\nimport {MatBottomSheet} from '@angular/material/bottom-sheet';\r\nimport {NgxFilterMenuComponent} from '../filter-menu/ngx-filter-menu.component';\r\nimport {EditorActionButton, PointOptions, PointShape} from '../../PrivateModels';\r\n// import {NgxOpenCVService} from '../../services/ngx-opencv.service';\r\nimport {DocScannerConfig, ImageDimensions, OpenCVState} from '../../PublicModels';\r\nimport {NgxOpenCVService} from 'ngx-opencv';\r\n\r\ndeclare var cv: any;\r\n\r\n@Component({\r\n  selector: 'ngx-doc-scanner',\r\n  templateUrl: './ngx-doc-scanner.component.html',\r\n  styleUrls: ['./ngx-doc-scanner.component.scss']\r\n})\r\nexport class NgxDocScannerComponent implements OnInit {\r\n  /**\r\n   * editor config object\r\n   */\r\n  options: ImageEditorConfig;\r\n  // ************* //\r\n  // EDITOR CONFIG //\r\n  // ************* //\r\n  /**\r\n   * an array of action buttons displayed on the editor screen\r\n   */\r\n  private editorButtons: Array<EditorActionButton>;\r\n\r\n  /**\r\n   * returns an array of buttons according to the editor mode\r\n   */\r\n  get displayedButtons() {\r\n    return this.editorButtons.filter(button => {\r\n      return button.mode === this.mode;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * max width of the preview area\r\n   */\r\n  private maxPreviewWidth: number;\r\n  /**\r\n   * dimensions of the image container\r\n   */\r\n  imageDivStyle: { [key: string]: string | number };\r\n  /**\r\n   * editor div style\r\n   */\r\n  editorStyle: { [key: string]: string | number };\r\n\r\n  // ************* //\r\n  // EDITOR STATE //\r\n  // ************* //\r\n  /**\r\n   * state of opencv loading\r\n   */\r\n  private cvState: string;\r\n  /**\r\n   * true after the image is loaded and preview is displayed\r\n   */\r\n  imageLoaded = false;\r\n  /**\r\n   * editor mode\r\n   */\r\n  mode: 'crop' | 'color' = 'crop';\r\n  /**\r\n   * filter selected by the user, returned by the filter selector bottom sheet\r\n   */\r\n  private selectedFilter = 'default';\r\n\r\n  // ******************* //\r\n  // OPERATION VARIABLES //\r\n  // ******************* //\r\n  /**\r\n   * viewport dimensions\r\n   */\r\n  private screenDimensions: ImageDimensions;\r\n  /**\r\n   * image dimensions\r\n   */\r\n  private imageDimensions: ImageDimensions = {\r\n    width: 0,\r\n    height: 0\r\n  };\r\n  /**\r\n   * dimensions of the preview pane\r\n   */\r\n  previewDimensions: ImageDimensions;\r\n  /**\r\n   * ration between preview image and original\r\n   */\r\n  private imageResizeRatio: number;\r\n  /**\r\n   * stores the original image for reset purposes\r\n   */\r\n  private originalImage: File;\r\n  /**\r\n   * stores the edited image\r\n   */\r\n  private editedImage: HTMLCanvasElement;\r\n  /**\r\n   * stores the preview image as canvas\r\n   */\r\n  @ViewChild('PreviewCanvas', {read: ElementRef}) private previewCanvas: ElementRef;\r\n  /**\r\n   * an array of points used by the crop tool\r\n   */\r\n  private points: Array<PointPositionChange>;\r\n\r\n  // ************** //\r\n  // EVENT EMITTERS //\r\n  // ************** //\r\n  /**\r\n   * optional binding to the exit button of the editor\r\n   */\r\n  @Output() exitEditor: EventEmitter<string> = new EventEmitter<string>();\r\n  /**\r\n   * fires on edit completion\r\n   */\r\n  @Output() editResult: EventEmitter<Blob> = new EventEmitter<Blob>();\r\n  /**\r\n   * emits errors, can be linked to an error handler of choice\r\n   */\r\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\r\n  /**\r\n   * emits the loading status of the cv module.\r\n   */\r\n  @Output() ready: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  /**\r\n   * emits true when processing is done, false when completed\r\n   */\r\n  @Output() processing: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  // ****** //\r\n  // INPUTS //\r\n  // ****** //\r\n  /**\r\n   * set image for editing\r\n   * @param file - file from form input\r\n   */\r\n  @Input() set file(file: File) {\r\n    if (file) {\r\n      setTimeout(() => {\r\n        this.processing.emit(true);\r\n      }, 5);\r\n      this.imageLoaded = false;\r\n      this.originalImage = file;\r\n      this.ngxOpenCv.cvState.subscribe(\r\n        async (cvState: OpenCVState) => {\r\n          if (cvState.ready) {\r\n            // read file to image & canvas\r\n            await this.loadFile(file);\r\n            this.processing.emit(false);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * editor configuration object\r\n   */\r\n  @Input() config: DocScannerConfig;\r\n\r\n\r\n  constructor(private ngxOpenCv: NgxOpenCVService, private limitsService: LimitsService, private bottomSheet: MatBottomSheet) {\r\n    this.screenDimensions = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight\r\n    };\r\n\r\n    // subscribe to status of cv module\r\n    this.ngxOpenCv.cvState.subscribe((cvState: OpenCVState) => {\r\n      this.cvState = cvState.state;\r\n      this.ready.emit(cvState.ready);\r\n      if (cvState.error) {\r\n        this.error.emit(new Error('error loading cv'));\r\n      } else if (cvState.loading) {\r\n        this.processing.emit(true);\r\n      } else if (cvState.ready) {\r\n        this.processing.emit(false);\r\n      }\r\n    });\r\n\r\n    // subscribe to positions of crop tool\r\n    this.limitsService.positions.subscribe(points => {\r\n      this.points = points;\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editorButtons = [\r\n      {\r\n        name: 'exit',\r\n        action: () => {\r\n          this.exitEditor.emit('canceled');\r\n        },\r\n        icon: 'arrow_back',\r\n        type: 'fab',\r\n        mode: 'crop'\r\n      },\r\n      {\r\n        name: 'rotate',\r\n        action: this.rotateImage.bind(this),\r\n        icon: 'rotate_right',\r\n        type: 'fab',\r\n        mode: 'crop'\r\n      },\r\n      {\r\n        name: 'done_crop',\r\n        action: async () => {\r\n          this.mode = 'color';\r\n          await this.transform();\r\n          if (this.config.filterEnable) {\r\n            await this.applyFilter(true);\r\n          }\r\n        },\r\n        icon: 'done',\r\n        type: 'fab',\r\n        mode: 'crop'\r\n      },\r\n      {\r\n        name: 'back',\r\n        action: () => {\r\n          this.mode = 'crop';\r\n          this.loadFile(this.originalImage);\r\n        },\r\n        icon: 'arrow_back',\r\n        type: 'fab',\r\n        mode: 'color'\r\n      },\r\n      {\r\n        name: 'filter',\r\n        action: () => {\r\n          if (this.config.filterEnable) {\r\n            return this.chooseFilters();\r\n          }\r\n        },\r\n        icon: 'photo_filter',\r\n        type: 'fab',\r\n        mode: this.config.filterEnable ? 'color' : 'disabled'\r\n      },\r\n      {\r\n        name: 'upload',\r\n        action: this.exportImage.bind(this),\r\n        icon: 'cloud_upload',\r\n        type: 'fab',\r\n        mode: 'color'\r\n      },\r\n    ];\r\n\r\n    // set options from config object\r\n    this.options = new ImageEditorConfig(this.config);\r\n    // set export image icon\r\n    this.editorButtons.forEach(button => {\r\n      if (button.name === 'upload') {\r\n        button.icon = this.options.exportImageIcon;\r\n      }\r\n    });\r\n    this.maxPreviewWidth = this.options.maxPreviewWidth;\r\n    this.editorStyle = this.options.editorStyle;\r\n  }\r\n\r\n  // ***************************** //\r\n  // editor action buttons methods //\r\n  // ***************************** //\r\n\r\n  /**\r\n   * emits the exitEditor event\r\n   */\r\n  exit() {\r\n    this.exitEditor.emit('canceled');\r\n  }\r\n\r\n  /**\r\n   * applies the selected filter, and when done emits the resulted image\r\n   */\r\n  private async exportImage() {\r\n    await this.applyFilter(false);\r\n    if (this.options.maxImageDimensions) {\r\n      this.resize(this.editedImage)\r\n      .then(resizeResult => {\r\n        resizeResult.toBlob((blob) => {\r\n          this.editResult.emit(blob);\r\n          this.processing.emit(false);\r\n        }, this.originalImage.type);\r\n      });\r\n    } else {\r\n      this.editedImage.toBlob((blob) => {\r\n        this.editResult.emit(blob);\r\n        this.processing.emit(false);\r\n      }, this.originalImage.type);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * open the bottom sheet for selecting filters, and applies the selected filter in preview mode\r\n   */\r\n  private chooseFilters() {\r\n    const data = {filter: this.selectedFilter};\r\n    const bottomSheetRef = this.bottomSheet.open(NgxFilterMenuComponent, {\r\n      data: data\r\n    });\r\n    bottomSheetRef.afterDismissed().subscribe(() => {\r\n      this.selectedFilter = data.filter;\r\n      this.applyFilter(true);\r\n    });\r\n\r\n  }\r\n\r\n  // *************************** //\r\n  // File Input & Output Methods //\r\n  // *************************** //\r\n  /**\r\n   * load image from input field\r\n   */\r\n  private loadFile(file: File) {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.processing.emit(true);\r\n      try {\r\n        await this.readImage(file);\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error.emit(new Error(err));\r\n      }\r\n      try {\r\n        await this.showPreview();\r\n      } catch (err) {\r\n        console.error(err);\r\n        this.error.emit(new Error(err));\r\n      }\r\n      // set pane limits\r\n      // show points\r\n      this.imageLoaded = true;\r\n      await this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\r\n      setTimeout(async () => {\r\n        await this.detectContours();\r\n        this.processing.emit(false);\r\n        resolve();\r\n      }, 15);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * read image from File object\r\n   */\r\n  private readImage(file: File) {\r\n    return new Promise(async (resolve, reject) => {\r\n      let imageSrc;\r\n      try {\r\n        imageSrc = await readFile();\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n      const img = new Image();\r\n      img.onload = async () => {\r\n        // set edited image canvas and dimensions\r\n        this.editedImage = <HTMLCanvasElement>document.createElement('canvas');\r\n        this.editedImage.width = img.width;\r\n        this.editedImage.height = img.height;\r\n        const ctx = this.editedImage.getContext('2d');\r\n        ctx.drawImage(img, 0, 0);\r\n        // resize image if larger than max image size\r\n        const width = img.width > img.height ? img.height : img.width;\r\n        if (width > this.options.maxImageDimensions.width) {\r\n          this.editedImage = await this.resize(this.editedImage);\r\n        }\r\n        this.imageDimensions.width = this.editedImage.width;\r\n        this.imageDimensions.height = this.editedImage.height;\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        resolve();\r\n      };\r\n      img.src = imageSrc;\r\n    });\r\n\r\n    /**\r\n     * read file from input field\r\n     */\r\n    function readFile() {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          resolve(reader.result);\r\n        };\r\n        reader.onerror = (err) => {\r\n          reject(err);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      });\r\n    }\r\n  }\r\n\r\n  // ************************ //\r\n  // Image Processing Methods //\r\n  // ************************ //\r\n  /**\r\n   * rotate image 90 degrees\r\n   */\r\n  private rotateImage() {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const dst = cv.imread(this.editedImage);\r\n        // const dst = new cv.Mat();\r\n        cv.transpose(dst, dst);\r\n        cv.flip(dst, dst, 1);\r\n        cv.imshow(this.editedImage, dst);\r\n        // src.delete();\r\n        dst.delete();\r\n        // save current preview dimensions and positions\r\n        const initialPreviewDimensions = {width: 0, height: 0};\r\n        Object.assign(initialPreviewDimensions, this.previewDimensions);\r\n        const initialPositions = Array.from(this.points);\r\n        // get new dimensions\r\n        // set new preview pane dimensions\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        // get preview pane resize ratio\r\n        const previewResizeRatios = {\r\n          width: this.previewDimensions.width / initialPreviewDimensions.width,\r\n          height: this.previewDimensions.height / initialPreviewDimensions.height\r\n        };\r\n        // set new preview pane dimensions\r\n\r\n        this.limitsService.rotateClockwise(previewResizeRatios, initialPreviewDimensions, initialPositions);\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve();\r\n        });\r\n      }, 30);\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * detects the contours of the document and\r\n   **/\r\n  private detectContours(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        // load the image and compute the ratio of the old height to the new height, clone it, and resize it\r\n        const processingResizeRatio = 0.5;\r\n        const src = cv.imread(this.editedImage);\r\n        const dst = cv.Mat.zeros(src.rows, src.cols, cv.CV_8UC3);\r\n        const dsize = new cv.Size(src.rows * processingResizeRatio, src.cols * processingResizeRatio);\r\n        const ksize = new cv.Size(5, 5);\r\n        // convert the image to grayscale, blur it, and find edges in the image\r\n        cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);\r\n        // cv.GaussianBlur(src, src, ksize, 0, 0, cv.BORDER_DEFAULT);\r\n        // cv.Canny(src, src, 75, 200);\r\n        // find contours\r\n\r\n        if (this.config.thresholdInfo.thresholdType === 'standard') {\r\n          cv.threshold(src, src, this.config.thresholdInfo.thresh, this.config.thresholdInfo.maxValue, cv.THRESH_BINARY);\r\n        } else if (this.config.thresholdInfo.thresholdType === 'adaptive_mean') {\r\n          cv.adaptiveThreshold(src, src, this.config.thresholdInfo.maxValue, cv.ADAPTIVE_THRESH_MEAN_C,\r\n            cv.THRESH_BINARY, this.config.thresholdInfo.blockSize, this.config.thresholdInfo.c);\r\n        } else if (this.config.thresholdInfo.thresholdType === 'adaptive_gaussian') {\r\n          cv.adaptiveThreshold(src, src, this.config.thresholdInfo.maxValue, cv.ADAPTIVE_THRESH_GAUSSIAN_C,\r\n            cv.THRESH_BINARY, this.config.thresholdInfo.blockSize, this.config.thresholdInfo.c);\r\n        }\r\n\r\n        const contours = new cv.MatVector();\r\n        const hierarchy = new cv.Mat();\r\n        cv.findContours(src, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);\r\n        const cnt = contours.get(4);\r\n        console.log('----------UNIQUE RECTANGLES FROM ALL CONTOURS----------');\r\n        const rects = [];\r\n        for (let i = 0; i < contours.size(); i++) {\r\n          const cn = contours.get(i);\r\n          const r = cv.minAreaRect(cn);\r\n          let add = true;\r\n          if (r.size.height < 50 || r.size.width < 50\r\n            || r.angle === 90 || r.angle === 180 || r.angle === 0\r\n            || r.angle === -90 || r.angle === -180\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          for (let j = 0; j < rects.length; j++) {\r\n            if (\r\n              rects[j].angle === r.angle\r\n              && rects[j].center.x === r.center.x && rects[j].center.y === r.center.y\r\n              && rects[j].size.width === r.size.width && rects[j].size.height === r.size.height\r\n            ) {\r\n              add = false;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (add) {\r\n            rects.push(r);\r\n          }\r\n        }\r\n\r\n        let rect2 = cv.minAreaRect(cnt);\r\n        for (let i = 0; i < rects.length; i++) {\r\n          if (rects[i].size.width + rects[i].size.height > rect2.size.width + rect2.size.height\r\n            && !(rects[i].angle === 90 || rects[i].angle === 180 || rects[i].angle === 0\r\n              || rects[i].angle === -90 || rects[i].angle === -180)) {\r\n            rect2 = rects[i];\r\n          }\r\n        }\r\n        console.log(rects);\r\n\r\n        console.log('---------------------------------------------------------');\r\n        console.log(cnt);\r\n        console.log(rect2);\r\n        const vertices = cv.RotatedRect.points(rect2);\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n          vertices[i].x = vertices[i].x * this.imageResizeRatio;\r\n          vertices[i].y = vertices[i].y * this.imageResizeRatio;\r\n        }\r\n\r\n        console.log(vertices);\r\n\r\n        const rect = cv.boundingRect(src);\r\n\r\n        src.delete();\r\n        hierarchy.delete();\r\n        contours.delete();\r\n        // transform the rectangle into a set of points\r\n        Object.keys(rect).forEach(key => {\r\n          rect[key] = rect[key] * this.imageResizeRatio;\r\n        });\r\n\r\n        let contourCoordinates;\r\n        if (this.config.useRotatedRectangle\r\n          && this.pointsAreNotTheSame(vertices)\r\n        ) {\r\n          contourCoordinates = [\r\n            new PositionChangeData({x: vertices[0].x, y: vertices[0].y}, ['left', 'top']),\r\n            new PositionChangeData({x: vertices[1].x, y: vertices[1].y}, ['right', 'top']),\r\n            new PositionChangeData({x: vertices[2].x, y: vertices[2].y}, ['right', 'bottom']),\r\n            new PositionChangeData({x: vertices[3].x, y: vertices[3].y}, ['left', 'bottom']),\r\n          ];\r\n        } else {\r\n          contourCoordinates = [\r\n            new PositionChangeData({x: rect.x, y: rect.y}, ['left', 'top']),\r\n            new PositionChangeData({x: rect.x + rect.width, y: rect.y}, ['right', 'top']),\r\n            new PositionChangeData({x: rect.x + rect.width, y: rect.y + rect.height}, ['right', 'bottom']),\r\n            new PositionChangeData({x: rect.x, y: rect.y + rect.height}, ['left', 'bottom']),\r\n          ];\r\n        }\r\n\r\n\r\n        this.limitsService.repositionPoints(contourCoordinates);\r\n        // this.processing.emit(false);\r\n        resolve();\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  private pointsAreNotTheSame(vertices: any): boolean {\r\n    return !(vertices[0].x === vertices[1].x && vertices[1].x === vertices[2].x && vertices[2].x === vertices[3].x &&\r\n      vertices[0].y === vertices[1].y && vertices[1].y === vertices[2].y && vertices[2].y === vertices[3].y);\r\n  }\r\n\r\n  /**\r\n   * apply perspective transform\r\n   */\r\n  private transform(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const dst = cv.imread(this.editedImage);\r\n\r\n        // create source coordinates matrix\r\n        const sourceCoordinates = [\r\n          this.getPoint(['top', 'left']),\r\n          this.getPoint(['top', 'right']),\r\n          this.getPoint(['bottom', 'right']),\r\n          this.getPoint(['bottom', 'left'])\r\n        ].map(point => {\r\n          return [point.x / this.imageResizeRatio, point.y / this.imageResizeRatio];\r\n        });\r\n\r\n        // get max width\r\n        const bottomWidth = this.getPoint(['bottom', 'right']).x - this.getPoint(['bottom', 'left']).x;\r\n        const topWidth = this.getPoint(['top', 'right']).x - this.getPoint(['top', 'left']).x;\r\n        const maxWidth = Math.max(bottomWidth, topWidth) / this.imageResizeRatio;\r\n        // get max height\r\n        const leftHeight = this.getPoint(['bottom', 'left']).y - this.getPoint(['top', 'left']).y;\r\n        const rightHeight = this.getPoint(['bottom', 'right']).y - this.getPoint(['top', 'right']).y;\r\n        const maxHeight = Math.max(leftHeight, rightHeight) / this.imageResizeRatio;\r\n        // create dest coordinates matrix\r\n        const destCoordinates = [\r\n          [0, 0],\r\n          [maxWidth - 1, 0],\r\n          [maxWidth - 1, maxHeight - 1],\r\n          [0, maxHeight - 1]\r\n        ];\r\n\r\n        // convert to open cv matrix objects\r\n        const Ms = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...sourceCoordinates));\r\n        const Md = cv.matFromArray(4, 1, cv.CV_32FC2, [].concat(...destCoordinates));\r\n        const transformMatrix = cv.getPerspectiveTransform(Ms, Md);\r\n        // set new image size\r\n        const dsize = new cv.Size(maxWidth, maxHeight);\r\n        // perform warp\r\n        cv.warpPerspective(dst, dst, transformMatrix, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());\r\n        cv.imshow(this.editedImage, dst);\r\n\r\n        dst.delete();\r\n        Ms.delete();\r\n        Md.delete();\r\n        transformMatrix.delete();\r\n\r\n        this.setPreviewPaneDimensions(this.editedImage);\r\n        this.showPreview().then(() => {\r\n          this.processing.emit(false);\r\n          resolve();\r\n        });\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * applies the selected filter to the image\r\n   * @param preview - when true, will not apply the filter to the edited image but only display a preview.\r\n   * when false, will apply to editedImage\r\n   */\r\n  private applyFilter(preview: boolean): Promise<void> {\r\n    return new Promise(async (resolve, reject) => {\r\n      this.processing.emit(true);\r\n      // default options\r\n      const options = {\r\n        blur: false,\r\n        th: true,\r\n        thMode: cv.ADAPTIVE_THRESH_MEAN_C,\r\n        thMeanCorrection: 10,\r\n        thBlockSize: 25,\r\n        thMax: 255,\r\n        grayScale: true,\r\n      };\r\n      const dst = cv.imread(this.editedImage);\r\n\r\n      if (!this.config.filterEnable) {\r\n        this.selectedFilter = 'original';\r\n      }\r\n\r\n      switch (this.selectedFilter) {\r\n        case 'original':\r\n          options.th = false;\r\n          options.grayScale = false;\r\n          options.blur = false;\r\n          break;\r\n        case 'magic_color':\r\n          options.grayScale = false;\r\n          break;\r\n        case 'bw2':\r\n          options.thMode = cv.ADAPTIVE_THRESH_GAUSSIAN_C;\r\n          options.thMeanCorrection = 15;\r\n          options.thBlockSize = 15;\r\n          break;\r\n        case 'bw3':\r\n          options.blur = true;\r\n          options.thMeanCorrection = 15;\r\n          break;\r\n      }\r\n\r\n      setTimeout(async () => {\r\n        if (options.grayScale) {\r\n          cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);\r\n        }\r\n        if (options.blur) {\r\n          const ksize = new cv.Size(5, 5);\r\n          cv.GaussianBlur(dst, dst, ksize, 0, 0, cv.BORDER_DEFAULT);\r\n        }\r\n        if (options.th) {\r\n          if (options.grayScale) {\r\n            cv.adaptiveThreshold(dst, dst, options.thMax, options.thMode, cv.THRESH_BINARY, options.thBlockSize, options.thMeanCorrection);\r\n          } else {\r\n            dst.convertTo(dst, -1, 1, 60);\r\n            cv.threshold(dst, dst, 170, 255, cv.THRESH_BINARY);\r\n          }\r\n        }\r\n        if (!preview) {\r\n          cv.imshow(this.editedImage, dst);\r\n        }\r\n        await this.showPreview(dst);\r\n        this.processing.emit(false);\r\n        resolve();\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * resize an image to fit constraints set in options.maxImageDimensions\r\n   */\r\n  private resize(image: HTMLCanvasElement): Promise<HTMLCanvasElement> {\r\n    return new Promise((resolve, reject) => {\r\n      this.processing.emit(true);\r\n      setTimeout(() => {\r\n        const src = cv.imread(image);\r\n        const currentDimensions = {\r\n          width: src.size().width,\r\n          height: src.size().height\r\n        };\r\n        const resizeDimensions = {\r\n          width: 0,\r\n          height: 0\r\n        };\r\n        if (currentDimensions.width > this.options.maxImageDimensions.width) {\r\n          resizeDimensions.width = this.options.maxImageDimensions.width;\r\n          resizeDimensions.height = this.options.maxImageDimensions.width / currentDimensions.width * currentDimensions.height;\r\n          if (resizeDimensions.height > this.options.maxImageDimensions.height) {\r\n            resizeDimensions.height = this.options.maxImageDimensions.height;\r\n            resizeDimensions.width = this.options.maxImageDimensions.height / currentDimensions.height * currentDimensions.width;\r\n          }\r\n          const dsize = new cv.Size(Math.floor(resizeDimensions.width), Math.floor(resizeDimensions.height));\r\n          cv.resize(src, src, dsize, 0, 0, cv.INTER_AREA);\r\n          const resizeResult = <HTMLCanvasElement>document.createElement('canvas');\r\n          cv.imshow(resizeResult, src);\r\n          src.delete();\r\n          this.processing.emit(false);\r\n          resolve(resizeResult);\r\n        } else {\r\n          this.processing.emit(false);\r\n          resolve(image);\r\n        }\r\n      }, 30);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * display a preview of the image on the preview canvas\r\n   */\r\n  private showPreview(image?: any) {\r\n    return new Promise((resolve, reject) => {\r\n      let src;\r\n      if (image) {\r\n        src = image;\r\n      } else {\r\n        src = cv.imread(this.editedImage);\r\n      }\r\n      const dst = new cv.Mat();\r\n      const dsize = new cv.Size(0, 0);\r\n      cv.resize(src, dst, dsize, this.imageResizeRatio, this.imageResizeRatio, cv.INTER_AREA);\r\n      cv.imshow(this.previewCanvas.nativeElement, dst);\r\n      src.delete();\r\n      dst.delete();\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  // *************** //\r\n  // Utility Methods //\r\n  // *************** //\r\n  /**\r\n   * set preview canvas dimensions according to the canvas element of the original image\r\n   */\r\n  private setPreviewPaneDimensions(img: HTMLCanvasElement) {\r\n    // set preview pane dimensions\r\n    this.previewDimensions = this.calculateDimensions(img.width, img.height);\r\n    this.previewCanvas.nativeElement.width = this.previewDimensions.width;\r\n    this.previewCanvas.nativeElement.height = this.previewDimensions.height;\r\n    this.imageResizeRatio = this.previewDimensions.width / img.width;\r\n    this.imageDivStyle = {\r\n      width: this.previewDimensions.width + this.options.cropToolDimensions.width + 'px',\r\n      height: this.previewDimensions.height + this.options.cropToolDimensions.height + 'px',\r\n      'margin-left': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 + ${this.options.cropToolDimensions.width / 2}px)`,\r\n      'margin-right': `calc((100% - ${this.previewDimensions.width + 10}px) / 2 - ${this.options.cropToolDimensions.width / 2}px)`,\r\n    };\r\n    this.limitsService.setPaneDimensions({width: this.previewDimensions.width, height: this.previewDimensions.height});\r\n  }\r\n\r\n  /**\r\n   * calculate dimensions of the preview canvas\r\n   */\r\n  private calculateDimensions(width: number, height: number): { width: number; height: number; ratio: number } {\r\n    const ratio = width / height;\r\n\r\n    const maxWidth = this.screenDimensions.width > this.maxPreviewWidth ?\r\n      this.maxPreviewWidth : this.screenDimensions.width - 40;\r\n    const maxHeight = this.screenDimensions.height - 240;\r\n    const calculated = {\r\n      width: maxWidth,\r\n      height: Math.round(maxWidth / ratio),\r\n      ratio: ratio\r\n    };\r\n\r\n    if (calculated.height > maxHeight) {\r\n      calculated.height = maxHeight;\r\n      calculated.width = Math.round(maxHeight * ratio);\r\n    }\r\n    return calculated;\r\n  }\r\n\r\n  /**\r\n   * returns a point by it's roles\r\n   * @param roles - an array of roles by which the point will be fetched\r\n   */\r\n  private getPoint(roles: RolesArray) {\r\n    return this.points.find(point => {\r\n      return this.limitsService.compareArray(point.roles, roles);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * a class for generating configuration objects for the editor\r\n */\r\nclass ImageEditorConfig implements DocScannerConfig {\r\n  /**\r\n   * max dimensions of oputput image. if set to zero\r\n   */\r\n  maxImageDimensions: ImageDimensions = {\r\n    width: 800,\r\n    height: 1200\r\n  };\r\n  /**\r\n   * background color of the main editor div\r\n   */\r\n  editorBackgroundColor = '#fefefe';\r\n  /**\r\n   * css properties for the main editor div\r\n   */\r\n  editorDimensions: { width: string; height: string; } = {\r\n    width: '100vw',\r\n    height: '100vh'\r\n  };\r\n  /**\r\n   * css that will be added to the main div of the editor component\r\n   */\r\n  extraCss: { [key: string]: string | number } = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0\r\n  };\r\n\r\n  /**\r\n   * material design theme color name\r\n   */\r\n  buttonThemeColor: 'primary' | 'warn' | 'accent' = 'accent';\r\n  /**\r\n   * icon for the button that completes the editing and emits the edited image\r\n   */\r\n  exportImageIcon = 'cloud_upload';\r\n  /**\r\n   * color of the crop tool\r\n   */\r\n  cropToolColor = '#3cabe2';\r\n  /**\r\n   * shape of the crop tool, can be either a rectangle or a circle\r\n   */\r\n  cropToolShape: PointShape = 'rect';\r\n  /**\r\n   * dimensions of the crop tool\r\n   */\r\n  cropToolDimensions: ImageDimensions = {\r\n    width: 10,\r\n    height: 10\r\n  };\r\n  /**\r\n   * aggregation of the properties regarding point attributes generated by the class constructor\r\n   */\r\n  pointOptions: PointOptions;\r\n  /**\r\n   * aggregation of the properties regarding the editor style generated by the class constructor\r\n   */\r\n  editorStyle?: { [key: string]: string | number };\r\n  /**\r\n   * crop tool outline width\r\n   */\r\n  cropToolLineWeight = 3;\r\n  /**\r\n   * maximum size of the preview pane\r\n   */\r\n  maxPreviewWidth = 800;\r\n\r\n  constructor(options: DocScannerConfig) {\r\n    if (options) {\r\n      Object.keys(options).forEach(key => {\r\n        this[key] = options[key];\r\n      });\r\n    }\r\n\r\n    this.editorStyle = {'background-color': this.editorBackgroundColor};\r\n    Object.assign(this.editorStyle, this.editorDimensions);\r\n    Object.assign(this.editorStyle, this.extraCss);\r\n\r\n    this.pointOptions = {\r\n      shape: this.cropToolShape,\r\n      color: this.cropToolColor,\r\n      width: 0,\r\n      height: 0\r\n    };\r\n    Object.assign(this.pointOptions, this.cropToolDimensions);\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {NgxDraggablePointComponent} from './components/draggable-point/ngx-draggable-point.component';\r\nimport {NgxFilterMenuComponent} from './components/filter-menu/ngx-filter-menu.component';\r\nimport {NgxShapeOutlineComponent} from './components/shape-outline/ngx-shape-outline.component';\r\nimport {NgxDocScannerComponent} from './components/image-editor/ngx-doc-scanner.component';\r\nimport {LimitsService} from './services/limits.service';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {AngularDraggableModule} from 'angular2-draggable';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OpenCVConfig} from './PublicModels';\r\nimport {NgxOpenCVModule} from 'ngx-opencv';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport {NgxOpenCVService, OpenCvConfigToken} from 'ngx-opencv';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxDraggablePointComponent,\r\n    NgxFilterMenuComponent,\r\n    NgxShapeOutlineComponent,\r\n    NgxDocScannerComponent,\r\n  ],\r\n  imports: [\r\n    FlexLayoutModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatBottomSheetModule,\r\n    MatListModule,\r\n    AngularDraggableModule,\r\n    CommonModule,\r\n    NgxOpenCVModule,\r\n  ],\r\n  exports: [\r\n    FlexLayoutModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatBottomSheetModule,\r\n    MatListModule,\r\n    AngularDraggableModule,\r\n    NgxDocScannerComponent,\r\n  ],\r\n  entryComponents: [\r\n    NgxFilterMenuComponent,\r\n  ],\r\n  providers: [\r\n    NgxOpenCVService,\r\n    LimitsService,\r\n  ]\r\n})\r\nexport class NgxDocumentScannerModule {\r\n  static forRoot(config: OpenCVConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxDocumentScannerModule,\r\n      providers: [\r\n        { provide: OpenCvConfigToken, useValue: config },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","/**\r\n * describes a state object for the OpenCV module\r\n */\r\nimport {PointShape} from './PrivateModels';\r\n\r\nexport interface OpenCVState {\r\n  ready: boolean;\r\n  loading: boolean;\r\n  error: boolean;\r\n  state: string;\r\n}\r\n\r\n/**\r\n * describes an object with width and height properties\r\n */\r\nexport interface ImageDimensions {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/**\r\n * threshold information for automatically detecting corners\r\n */\r\nexport interface ThresholdInformation {\r\n  thresholdType: 'standard' | 'adaptive_mean' | 'adaptive_gaussian';\r\n  /**\r\n   * Non-zero value assigned to the pixels for which the condition is satisfied\r\n   */\r\n  maxValue?: number;\r\n  /**\r\n   * Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on.\r\n   * Only used with adaptive threshold variants\r\n   */\r\n  blockSize?: number;\r\n  /**\r\n   *  Constant subtracted from the mean or weighted mean (see the details below).\r\n   *  Normally, it is positive but may be zero or negative as well.\r\n   *  Only used with adaptive threshold variants\r\n   */\r\n  c?: number;\r\n  /**\r\n   * threshold value. Only used with standard threshold type.\r\n   */\r\n  thresh?: number;\r\n\r\n\r\n}\r\n\r\n/**\r\n * describes a configuration object for the editor\r\n */\r\nexport interface DocScannerConfig {\r\n  /**\r\n   * whether filter options are enabled\r\n   */\r\n  filterEnable?: boolean;\r\n  /**\r\n   * max dimensions of output image. if set to zero will not resize the image\r\n   */\r\n  maxImageDimensions?: ImageDimensions;\r\n  /**\r\n   * background color of the main editor div\r\n   */\r\n  editorBackgroundColor?: string;\r\n  /**\r\n   * css properties for the main editor div\r\n   */\r\n  editorDimensions?: { width: string; height: string; };\r\n  /**\r\n   * css that will be added to the main div of the editor component\r\n   */\r\n  extraCss?: { [key: string]: string | number };\r\n  /**\r\n   * material design theme color name\r\n   */\r\n  buttonThemeColor?: 'primary' | 'warn' | 'accent';\r\n  /**\r\n   * icon for the button that completes the editing and emits the edited image\r\n   */\r\n  exportImageIcon?: string;\r\n  /**\r\n   * color of the crop tool (points and connecting lines)\r\n   */\r\n  cropToolColor?: string;\r\n  /**\r\n   * shape of the crop tool points\r\n   */\r\n  cropToolShape?: PointShape;\r\n  /**\r\n   * width and height of the crop tool points\r\n   */\r\n  cropToolDimensions?: ImageDimensions;\r\n  /**\r\n   * weight of the crop tool's connecting lines\r\n   */\r\n  cropToolLineWeight?: number;\r\n  /**\r\n   * max width of the preview pane\r\n   */\r\n  maxPreviewWidth?: number;\r\n  /**\r\n   * config threshold for auto\r\n   */\r\n  thresholdInfo?: ThresholdInformation;\r\n  /**\r\n   * whether rotated rectangle is used\r\n   */\r\n  useRotatedRectangle?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * describes a configuration object for the OpenCV service\r\n */\r\nexport interface OpenCVConfig {\r\n  /**\r\n   * path to the directory containing the OpenCV files, in the form of '/path/to/<opencv directory>'\r\n   * directory must contain the the following files:\r\n   * --<OpenCvDir>\r\n   * ----opencv.js\r\n   * ----opencv_js.wasm\r\n   */\r\n  openCVDirPath?: string;\r\n  /**\r\n   * additional callback that will run when OpenCv has finished loading and parsing\r\n   */\r\n  runOnOpenCVInit?: Function;\r\n}\r\n"],"names":[],"mappings":"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"}